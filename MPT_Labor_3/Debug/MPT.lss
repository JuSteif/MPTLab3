
MPT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000dc  00800060  00000c70  00000d04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080013c  0080013c  00000de0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000de0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e10  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005df  00000000  00000000  00000f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000286  00000000  00000000  00001523  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000083d  00000000  00000000  000017a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000035c  00000000  00000000  00001fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002ed  00000000  00000000  00002344  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006c1  00000000  00000000  00002631  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00002cf2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_10>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 cb 00 	jmp	0x196	; 0x196 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e7       	ldi	r30, 0x70	; 112
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 33       	cpi	r26, 0x3C	; 60
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	ac e3       	ldi	r26, 0x3C	; 60
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 34       	cpi	r26, 0x45	; 69
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8f 03 	call	0x71e	; 0x71e <main>
  8a:	0c 94 36 06 	jmp	0xc6c	; 0xc6c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_11>:
// ISR: Schlüsselwort für Compiler, dass dies eine ISR ist
// TIMER0_OVF_vect: Information an den Compiler, mit welchem Interrupt
//                  diese ISR verknüpft werden soll. Der Bezeichner "TIMER0_OVF_vect"
//                  ist wie alle anderen ISR-Bezeichner in "avr/interrupt.h" definiert.
ISR(TIMER0_OVF_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  9a:	0f 92       	push	r0
  9c:	11 24       	eor	r1, r1
  9e:	2f 93       	push	r18
  a0:	3f 93       	push	r19
  a2:	8f 93       	push	r24
  a4:	9f 93       	push	r25
  a6:	ef 93       	push	r30
  a8:	ff 93       	push	r31
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
	// Zählerstandsregister reinitialisieren
	TCNT0 = 256-250;
  b2:	82 e5       	ldi	r24, 0x52	; 82
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	26 e0       	ldi	r18, 0x06	; 6
  b8:	fc 01       	movw	r30, r24
  ba:	20 83       	st	Z, r18

	// Überlaufzähler inkrementieren
	OvCnt++;
  bc:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <OvCnt>
  c0:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <OvCnt+0x1>
  c4:	01 96       	adiw	r24, 0x01	; 1
  c6:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <OvCnt+0x1>
  ca:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <OvCnt>
	// Nach 100 Überläufen = 100ms
	if (OvCnt == 2000)
  ce:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <OvCnt>
  d2:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <OvCnt+0x1>
  d6:	80 3d       	cpi	r24, 0xD0	; 208
  d8:	97 40       	sbci	r25, 0x07	; 7
  da:	71 f4       	brne	.+28     	; 0xf8 <__vector_11+0x66>
	{
		// Überlaufzähler zurücksetzen
		OvCnt = 0;
  dc:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <OvCnt+0x1>
  e0:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <OvCnt>
		
		// LED toggeln
		TGL_BIT(LED_PORT,LED_0);
  e4:	85 e3       	ldi	r24, 0x35	; 53
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	25 e3       	ldi	r18, 0x35	; 53
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	f9 01       	movw	r30, r18
  ee:	30 81       	ld	r19, Z
  f0:	21 e0       	ldi	r18, 0x01	; 1
  f2:	23 27       	eor	r18, r19
  f4:	fc 01       	movw	r30, r24
  f6:	20 83       	st	Z, r18
	}
}
  f8:	00 00       	nop
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	ff 91       	pop	r31
 100:	ef 91       	pop	r30
 102:	9f 91       	pop	r25
 104:	8f 91       	pop	r24
 106:	3f 91       	pop	r19
 108:	2f 91       	pop	r18
 10a:	0f 90       	pop	r0
 10c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <__vector_10>:

//------------------------------------------------------------------------------
//  Interrupt Service Routinen
//------------------------------------------------------------------------------
ISR(TIMER0_COMP_vect)
{
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
 126:	ef 93       	push	r30
 128:	ff 93       	push	r31
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
	milliSec++;
 132:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <milliSec>
 136:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <milliSec+0x1>
 13a:	01 96       	adiw	r24, 0x01	; 1
 13c:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <milliSec+0x1>
 140:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <milliSec>
	TCNT0 = 0;
 144:	82 e5       	ldi	r24, 0x52	; 82
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	fc 01       	movw	r30, r24
 14a:	10 82       	st	Z, r1
}
 14c:	00 00       	nop
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	ff 91       	pop	r31
 154:	ef 91       	pop	r30
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	0f 90       	pop	r0
 15c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 160:	0f 90       	pop	r0
 162:	1f 90       	pop	r1
 164:	18 95       	reti

00000166 <__vector_3>:

ISR(INT2_vect){
 166:	1f 92       	push	r1
 168:	0f 92       	push	r0
 16a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 16e:	0f 92       	push	r0
 170:	11 24       	eor	r1, r1
 172:	8f 93       	push	r24
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	cd b7       	in	r28, 0x3d	; 61
 17a:	de b7       	in	r29, 0x3e	; 62
	state = 3;
 17c:	83 e0       	ldi	r24, 0x03	; 3
 17e:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
}
 182:	00 00       	nop
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	8f 91       	pop	r24
 18a:	0f 90       	pop	r0
 18c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <__vector_13>:

ISR(USART_RXC_vect){
 196:	1f 92       	push	r1
 198:	0f 92       	push	r0
 19a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 19e:	0f 92       	push	r0
 1a0:	11 24       	eor	r1, r1
 1a2:	2f 93       	push	r18
 1a4:	3f 93       	push	r19
 1a6:	4f 93       	push	r20
 1a8:	5f 93       	push	r21
 1aa:	6f 93       	push	r22
 1ac:	7f 93       	push	r23
 1ae:	8f 93       	push	r24
 1b0:	9f 93       	push	r25
 1b2:	af 93       	push	r26
 1b4:	bf 93       	push	r27
 1b6:	ef 93       	push	r30
 1b8:	ff 93       	push	r31
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
	if(UDR == 'h'){
 1c2:	8c e2       	ldi	r24, 0x2C	; 44
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	fc 01       	movw	r30, r24
 1c8:	80 81       	ld	r24, Z
 1ca:	88 36       	cpi	r24, 0x68	; 104
 1cc:	21 f4       	brne	.+8      	; 0x1d6 <__vector_13+0x40>
		UsartPuts("Taster 7 ist Start\nTaster 6 ist Stopp(Normal)\nTaster 2 ist Stopp(Interupt verarbeitet mit INT2)\n");
 1ce:	86 e6       	ldi	r24, 0x66	; 102
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 aa 04 	call	0x954	; 0x954 <UsartPuts>
	}
}
 1d6:	00 00       	nop
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	ff 91       	pop	r31
 1de:	ef 91       	pop	r30
 1e0:	bf 91       	pop	r27
 1e2:	af 91       	pop	r26
 1e4:	9f 91       	pop	r25
 1e6:	8f 91       	pop	r24
 1e8:	7f 91       	pop	r23
 1ea:	6f 91       	pop	r22
 1ec:	5f 91       	pop	r21
 1ee:	4f 91       	pop	r20
 1f0:	3f 91       	pop	r19
 1f2:	2f 91       	pop	r18
 1f4:	0f 90       	pop	r0
 1f6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <WaitTimer0_x_10ms>:

//------------------------------------------------------------------------------
//  Private Funktionen
//------------------------------------------------------------------------------
static void WaitTimer0_x_10ms(uint8_t x_10ms)
{
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	00 d0       	rcall	.+0      	; 0x206 <WaitTimer0_x_10ms+0x6>
 206:	cd b7       	in	r28, 0x3d	; 61
 208:	de b7       	in	r29, 0x3e	; 62
 20a:	8a 83       	std	Y+2, r24	; 0x02
	// IHR_CODE_HIER ...
	TCCR0 |= (1 << CS02) | (1 << CS00);
 20c:	83 e5       	ldi	r24, 0x53	; 83
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	23 e5       	ldi	r18, 0x53	; 83
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	f9 01       	movw	r30, r18
 216:	20 81       	ld	r18, Z
 218:	25 60       	ori	r18, 0x05	; 5
 21a:	fc 01       	movw	r30, r24
 21c:	20 83       	st	Z, r18
	TCNT0 = 100;
 21e:	82 e5       	ldi	r24, 0x52	; 82
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	24 e6       	ldi	r18, 0x64	; 100
 224:	fc 01       	movw	r30, r24
 226:	20 83       	st	Z, r18
	OCR0 = 0;
 228:	8c e5       	ldi	r24, 0x5C	; 92
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	fc 01       	movw	r30, r24
 22e:	10 82       	st	Z, r1
	TIMSK = 0;
 230:	89 e5       	ldi	r24, 0x59	; 89
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	fc 01       	movw	r30, r24
 236:	10 82       	st	Z, r1
	
	uint8_t waiter = 0;
 238:	19 82       	std	Y+1, r1	; 0x01
	
	if(x_10ms == 0){
 23a:	8a 81       	ldd	r24, Y+2	; 0x02
 23c:	88 23       	and	r24, r24
 23e:	01 f1       	breq	.+64     	; 0x280 <WaitTimer0_x_10ms+0x80>
		return;
	}
	
	while(1){
		if(BIT_IS_SET(TIFR, TOV0)){
 240:	88 e5       	ldi	r24, 0x58	; 88
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	fc 01       	movw	r30, r24
 246:	80 81       	ld	r24, Z
 248:	88 2f       	mov	r24, r24
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	81 70       	andi	r24, 0x01	; 1
 24e:	99 27       	eor	r25, r25
 250:	89 2b       	or	r24, r25
 252:	b1 f3       	breq	.-20     	; 0x240 <WaitTimer0_x_10ms+0x40>
			SET_BIT(TIFR, TOV0);
 254:	88 e5       	ldi	r24, 0x58	; 88
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	28 e5       	ldi	r18, 0x58	; 88
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	f9 01       	movw	r30, r18
 25e:	20 81       	ld	r18, Z
 260:	21 60       	ori	r18, 0x01	; 1
 262:	fc 01       	movw	r30, r24
 264:	20 83       	st	Z, r18
			waiter++;
 266:	89 81       	ldd	r24, Y+1	; 0x01
 268:	8f 5f       	subi	r24, 0xFF	; 255
 26a:	89 83       	std	Y+1, r24	; 0x01
			TCNT0 = 100;
 26c:	82 e5       	ldi	r24, 0x52	; 82
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	24 e6       	ldi	r18, 0x64	; 100
 272:	fc 01       	movw	r30, r24
 274:	20 83       	st	Z, r18
			
			if(waiter >= x_10ms){
 276:	99 81       	ldd	r25, Y+1	; 0x01
 278:	8a 81       	ldd	r24, Y+2	; 0x02
 27a:	98 17       	cp	r25, r24
 27c:	18 f4       	brcc	.+6      	; 0x284 <WaitTimer0_x_10ms+0x84>
				return;
			}
		}
	}
 27e:	e0 cf       	rjmp	.-64     	; 0x240 <WaitTimer0_x_10ms+0x40>
	TIMSK = 0;
	
	uint8_t waiter = 0;
	
	if(x_10ms == 0){
		return;
 280:	00 00       	nop
 282:	01 c0       	rjmp	.+2      	; 0x286 <WaitTimer0_x_10ms+0x86>
			SET_BIT(TIFR, TOV0);
			waiter++;
			TCNT0 = 100;
			
			if(waiter >= x_10ms){
				return;
 284:	00 00       	nop
			}
		}
	}
}
 286:	0f 90       	pop	r0
 288:	0f 90       	pop	r0
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	08 95       	ret

00000290 <potenz>:

int potenz(int basis, int exponent){
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	cd b7       	in	r28, 0x3d	; 61
 296:	de b7       	in	r29, 0x3e	; 62
 298:	28 97       	sbiw	r28, 0x08	; 8
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	f8 94       	cli
 29e:	de bf       	out	0x3e, r29	; 62
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	cd bf       	out	0x3d, r28	; 61
 2a4:	9e 83       	std	Y+6, r25	; 0x06
 2a6:	8d 83       	std	Y+5, r24	; 0x05
 2a8:	78 87       	std	Y+8, r23	; 0x08
 2aa:	6f 83       	std	Y+7, r22	; 0x07
	int result = 1;
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	9a 83       	std	Y+2, r25	; 0x02
 2b2:	89 83       	std	Y+1, r24	; 0x01
	for(int i = 0; i < exponent; i++){
 2b4:	1c 82       	std	Y+4, r1	; 0x04
 2b6:	1b 82       	std	Y+3, r1	; 0x03
 2b8:	12 c0       	rjmp	.+36     	; 0x2de <potenz+0x4e>
		result *= basis;
 2ba:	49 81       	ldd	r20, Y+1	; 0x01
 2bc:	5a 81       	ldd	r21, Y+2	; 0x02
 2be:	2d 81       	ldd	r18, Y+5	; 0x05
 2c0:	3e 81       	ldd	r19, Y+6	; 0x06
 2c2:	42 9f       	mul	r20, r18
 2c4:	c0 01       	movw	r24, r0
 2c6:	43 9f       	mul	r20, r19
 2c8:	90 0d       	add	r25, r0
 2ca:	52 9f       	mul	r21, r18
 2cc:	90 0d       	add	r25, r0
 2ce:	11 24       	eor	r1, r1
 2d0:	9a 83       	std	Y+2, r25	; 0x02
 2d2:	89 83       	std	Y+1, r24	; 0x01
	}
}

int potenz(int basis, int exponent){
	int result = 1;
	for(int i = 0; i < exponent; i++){
 2d4:	8b 81       	ldd	r24, Y+3	; 0x03
 2d6:	9c 81       	ldd	r25, Y+4	; 0x04
 2d8:	01 96       	adiw	r24, 0x01	; 1
 2da:	9c 83       	std	Y+4, r25	; 0x04
 2dc:	8b 83       	std	Y+3, r24	; 0x03
 2de:	2b 81       	ldd	r18, Y+3	; 0x03
 2e0:	3c 81       	ldd	r19, Y+4	; 0x04
 2e2:	8f 81       	ldd	r24, Y+7	; 0x07
 2e4:	98 85       	ldd	r25, Y+8	; 0x08
 2e6:	28 17       	cp	r18, r24
 2e8:	39 07       	cpc	r19, r25
 2ea:	3c f3       	brlt	.-50     	; 0x2ba <potenz+0x2a>
		result *= basis;
	}
	return result;
 2ec:	89 81       	ldd	r24, Y+1	; 0x01
 2ee:	9a 81       	ldd	r25, Y+2	; 0x02
}
 2f0:	28 96       	adiw	r28, 0x08	; 8
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	f8 94       	cli
 2f6:	de bf       	out	0x3e, r29	; 62
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	cd bf       	out	0x3d, r28	; 61
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	08 95       	ret

00000302 <uint16ToString>:

char* uint16ToString(uint16_t number){
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	cd b7       	in	r28, 0x3d	; 61
 308:	de b7       	in	r29, 0x3e	; 62
 30a:	2a 97       	sbiw	r28, 0x0a	; 10
 30c:	0f b6       	in	r0, 0x3f	; 63
 30e:	f8 94       	cli
 310:	de bf       	out	0x3e, r29	; 62
 312:	0f be       	out	0x3f, r0	; 63
 314:	cd bf       	out	0x3d, r28	; 61
 316:	9a 87       	std	Y+10, r25	; 0x0a
 318:	89 87       	std	Y+9, r24	; 0x09
	uint16_t num = number;
 31a:	89 85       	ldd	r24, Y+9	; 0x09
 31c:	9a 85       	ldd	r25, Y+10	; 0x0a
 31e:	9a 83       	std	Y+2, r25	; 0x02
 320:	89 83       	std	Y+1, r24	; 0x01
	uint8_t len = 0;
 322:	1b 82       	std	Y+3, r1	; 0x03
	while(num >= 1){
 324:	14 c0       	rjmp	.+40     	; 0x34e <uint16ToString+0x4c>
		num = number / potenz(10, len);
 326:	8b 81       	ldd	r24, Y+3	; 0x03
 328:	88 2f       	mov	r24, r24
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	bc 01       	movw	r22, r24
 32e:	8a e0       	ldi	r24, 0x0A	; 10
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	0e 94 48 01 	call	0x290	; 0x290 <potenz>
 336:	9c 01       	movw	r18, r24
 338:	89 85       	ldd	r24, Y+9	; 0x09
 33a:	9a 85       	ldd	r25, Y+10	; 0x0a
 33c:	b9 01       	movw	r22, r18
 33e:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__udivmodhi4>
 342:	cb 01       	movw	r24, r22
 344:	9a 83       	std	Y+2, r25	; 0x02
 346:	89 83       	std	Y+1, r24	; 0x01
		len++;
 348:	8b 81       	ldd	r24, Y+3	; 0x03
 34a:	8f 5f       	subi	r24, 0xFF	; 255
 34c:	8b 83       	std	Y+3, r24	; 0x03
}

char* uint16ToString(uint16_t number){
	uint16_t num = number;
	uint8_t len = 0;
	while(num >= 1){
 34e:	89 81       	ldd	r24, Y+1	; 0x01
 350:	9a 81       	ldd	r25, Y+2	; 0x02
 352:	89 2b       	or	r24, r25
 354:	41 f7       	brne	.-48     	; 0x326 <uint16ToString+0x24>
		num = number / potenz(10, len);
		len++;
	}
	
	if(len < 4){
 356:	8b 81       	ldd	r24, Y+3	; 0x03
 358:	84 30       	cpi	r24, 0x04	; 4
 35a:	10 f4       	brcc	.+4      	; 0x360 <uint16ToString+0x5e>
		len = 4;
 35c:	84 e0       	ldi	r24, 0x04	; 4
 35e:	8b 83       	std	Y+3, r24	; 0x03
	}
	len++;
 360:	8b 81       	ldd	r24, Y+3	; 0x03
 362:	8f 5f       	subi	r24, 0xFF	; 255
 364:	8b 83       	std	Y+3, r24	; 0x03
	
	char* result;
	result = malloc(sizeof(char) * len);
 366:	8b 81       	ldd	r24, Y+3	; 0x03
 368:	88 2f       	mov	r24, r24
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 15 05 	call	0xa2a	; 0xa2a <malloc>
 370:	9e 83       	std	Y+6, r25	; 0x06
 372:	8d 83       	std	Y+5, r24	; 0x05
	
	for(int8_t i = len - 1; i >= 0; i--){
 374:	8b 81       	ldd	r24, Y+3	; 0x03
 376:	81 50       	subi	r24, 0x01	; 1
 378:	8c 83       	std	Y+4, r24	; 0x04
 37a:	52 c0       	rjmp	.+164    	; 0x420 <__FUSE_REGION_LENGTH__+0x20>
		if(i == len - 4){
 37c:	8c 81       	ldd	r24, Y+4	; 0x04
 37e:	28 2f       	mov	r18, r24
 380:	88 0f       	add	r24, r24
 382:	33 0b       	sbc	r19, r19
 384:	8b 81       	ldd	r24, Y+3	; 0x03
 386:	88 2f       	mov	r24, r24
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	04 97       	sbiw	r24, 0x04	; 4
 38c:	28 17       	cp	r18, r24
 38e:	39 07       	cpc	r19, r25
 390:	71 f4       	brne	.+28     	; 0x3ae <uint16ToString+0xac>
			char zeichen = ',';
 392:	8c e2       	ldi	r24, 0x2C	; 44
 394:	8f 83       	std	Y+7, r24	; 0x07
			result[i] = zeichen;
 396:	8c 81       	ldd	r24, Y+4	; 0x04
 398:	08 2e       	mov	r0, r24
 39a:	00 0c       	add	r0, r0
 39c:	99 0b       	sbc	r25, r25
 39e:	2d 81       	ldd	r18, Y+5	; 0x05
 3a0:	3e 81       	ldd	r19, Y+6	; 0x06
 3a2:	82 0f       	add	r24, r18
 3a4:	93 1f       	adc	r25, r19
 3a6:	2f 81       	ldd	r18, Y+7	; 0x07
 3a8:	fc 01       	movw	r30, r24
 3aa:	20 83       	st	Z, r18
			continue;
 3ac:	36 c0       	rjmp	.+108    	; 0x41a <__FUSE_REGION_LENGTH__+0x1a>
		}
		char zeichen = (number % 10) + '0';
 3ae:	49 85       	ldd	r20, Y+9	; 0x09
 3b0:	5a 85       	ldd	r21, Y+10	; 0x0a
 3b2:	9a 01       	movw	r18, r20
 3b4:	ad ec       	ldi	r26, 0xCD	; 205
 3b6:	bc ec       	ldi	r27, 0xCC	; 204
 3b8:	0e 94 06 05 	call	0xa0c	; 0xa0c <__umulhisi3>
 3bc:	96 95       	lsr	r25
 3be:	87 95       	ror	r24
 3c0:	96 95       	lsr	r25
 3c2:	87 95       	ror	r24
 3c4:	96 95       	lsr	r25
 3c6:	87 95       	ror	r24
 3c8:	88 0f       	add	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	9c 01       	movw	r18, r24
 3ce:	22 0f       	add	r18, r18
 3d0:	33 1f       	adc	r19, r19
 3d2:	22 0f       	add	r18, r18
 3d4:	33 1f       	adc	r19, r19
 3d6:	82 0f       	add	r24, r18
 3d8:	93 1f       	adc	r25, r19
 3da:	9a 01       	movw	r18, r20
 3dc:	28 1b       	sub	r18, r24
 3de:	39 0b       	sbc	r19, r25
 3e0:	c9 01       	movw	r24, r18
 3e2:	80 5d       	subi	r24, 0xD0	; 208
 3e4:	88 87       	std	Y+8, r24	; 0x08
		result[i] = zeichen;
 3e6:	8c 81       	ldd	r24, Y+4	; 0x04
 3e8:	08 2e       	mov	r0, r24
 3ea:	00 0c       	add	r0, r0
 3ec:	99 0b       	sbc	r25, r25
 3ee:	2d 81       	ldd	r18, Y+5	; 0x05
 3f0:	3e 81       	ldd	r19, Y+6	; 0x06
 3f2:	82 0f       	add	r24, r18
 3f4:	93 1f       	adc	r25, r19
 3f6:	28 85       	ldd	r18, Y+8	; 0x08
 3f8:	fc 01       	movw	r30, r24
 3fa:	20 83       	st	Z, r18
		number = number / 10;
 3fc:	89 85       	ldd	r24, Y+9	; 0x09
 3fe:	9a 85       	ldd	r25, Y+10	; 0x0a
 400:	9c 01       	movw	r18, r24
 402:	ad ec       	ldi	r26, 0xCD	; 205
 404:	bc ec       	ldi	r27, 0xCC	; 204
 406:	0e 94 06 05 	call	0xa0c	; 0xa0c <__umulhisi3>
 40a:	96 95       	lsr	r25
 40c:	87 95       	ror	r24
 40e:	96 95       	lsr	r25
 410:	87 95       	ror	r24
 412:	96 95       	lsr	r25
 414:	87 95       	ror	r24
 416:	9a 87       	std	Y+10, r25	; 0x0a
 418:	89 87       	std	Y+9, r24	; 0x09
	len++;
	
	char* result;
	result = malloc(sizeof(char) * len);
	
	for(int8_t i = len - 1; i >= 0; i--){
 41a:	8c 81       	ldd	r24, Y+4	; 0x04
 41c:	81 50       	subi	r24, 0x01	; 1
 41e:	8c 83       	std	Y+4, r24	; 0x04
 420:	8c 81       	ldd	r24, Y+4	; 0x04
 422:	88 23       	and	r24, r24
 424:	0c f0       	brlt	.+2      	; 0x428 <__FUSE_REGION_LENGTH__+0x28>
 426:	aa cf       	rjmp	.-172    	; 0x37c <uint16ToString+0x7a>
		char zeichen = (number % 10) + '0';
		result[i] = zeichen;
		number = number / 10;
	}
	
	return result;
 428:	8d 81       	ldd	r24, Y+5	; 0x05
 42a:	9e 81       	ldd	r25, Y+6	; 0x06
}
 42c:	2a 96       	adiw	r28, 0x0a	; 10
 42e:	0f b6       	in	r0, 0x3f	; 63
 430:	f8 94       	cli
 432:	de bf       	out	0x3e, r29	; 62
 434:	0f be       	out	0x3f, r0	; 63
 436:	cd bf       	out	0x3d, r28	; 61
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	08 95       	ret

0000043e <A_3_4_1>:

//##############################################################################

// A_3_4_1: Reaktionstester mit Zeitmessung über Timer0 und Terminalausgabe
void A_3_4_1(void)
{
 43e:	0f 93       	push	r16
 440:	1f 93       	push	r17
 442:	cf 93       	push	r28
 444:	df 93       	push	r29
 446:	00 d0       	rcall	.+0      	; 0x448 <A_3_4_1+0xa>
 448:	00 d0       	rcall	.+0      	; 0x44a <A_3_4_1+0xc>
 44a:	cd b7       	in	r28, 0x3d	; 61
 44c:	de b7       	in	r29, 0x3e	; 62
	// IHR_CODE_HIER ...
	
	TASTER_DDR = 0x00;
 44e:	87 e3       	ldi	r24, 0x37	; 55
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	fc 01       	movw	r30, r24
 454:	10 82       	st	Z, r1
	LED_DDR = 0xff;
 456:	84 e3       	ldi	r24, 0x34	; 52
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	2f ef       	ldi	r18, 0xFF	; 255
 45c:	fc 01       	movw	r30, r24
 45e:	20 83       	st	Z, r18
	
	UsartInit(8,0,1,9600);
 460:	00 e8       	ldi	r16, 0x80	; 128
 462:	15 e2       	ldi	r17, 0x25	; 37
 464:	20 e0       	ldi	r18, 0x00	; 0
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	41 e0       	ldi	r20, 0x01	; 1
 46a:	60 e0       	ldi	r22, 0x00	; 0
 46c:	88 e0       	ldi	r24, 0x08	; 8
 46e:	0e 94 96 03 	call	0x72c	; 0x72c <UsartInit>
	SET_BIT(UCSRB, 7);
 472:	8a e2       	ldi	r24, 0x2A	; 42
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	2a e2       	ldi	r18, 0x2A	; 42
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	f9 01       	movw	r30, r18
 47c:	20 81       	ld	r18, Z
 47e:	20 68       	ori	r18, 0x80	; 128
 480:	fc 01       	movw	r30, r24
 482:	20 83       	st	Z, r18
	
	TCCR0 = (0<<WGM01) | (0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<CS02) | (0<<CS01) | (1<<CS00);
 484:	83 e5       	ldi	r24, 0x53	; 83
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	21 e0       	ldi	r18, 0x01	; 1
 48a:	fc 01       	movw	r30, r24
 48c:	20 83       	st	Z, r18
	TIMSK |= (0<<TOIE0) | (0<<OCIE0);
 48e:	89 e5       	ldi	r24, 0x59	; 89
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	29 e5       	ldi	r18, 0x59	; 89
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	f9 01       	movw	r30, r18
 498:	20 81       	ld	r18, Z
 49a:	fc 01       	movw	r30, r24
 49c:	20 83       	st	Z, r18
	OCR0 = 0;
 49e:	8c e5       	ldi	r24, 0x5C	; 92
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	fc 01       	movw	r30, r24
 4a4:	10 82       	st	Z, r1
	TCNT0 = 0;
 4a6:	82 e5       	ldi	r24, 0x52	; 82
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	fc 01       	movw	r30, r24
 4ac:	10 82       	st	Z, r1
	
	uint8_t waitTime = 1;
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t led = 0;
 4b2:	19 82       	std	Y+1, r1	; 0x01
	char* reactionTime = "Fehler";
 4b4:	87 ec       	ldi	r24, 0xC7	; 199
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	9c 83       	std	Y+4, r25	; 0x04
 4ba:	8b 83       	std	Y+3, r24	; 0x03
	
	while(1){
		switch(state){
 4bc:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
 4c0:	88 2f       	mov	r24, r24
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	81 30       	cpi	r24, 0x01	; 1
 4c6:	91 05       	cpc	r25, r1
 4c8:	09 f4       	brne	.+2      	; 0x4cc <A_3_4_1+0x8e>
 4ca:	54 c0       	rjmp	.+168    	; 0x574 <A_3_4_1+0x136>
 4cc:	82 30       	cpi	r24, 0x02	; 2
 4ce:	91 05       	cpc	r25, r1
 4d0:	1c f4       	brge	.+6      	; 0x4d8 <A_3_4_1+0x9a>
 4d2:	89 2b       	or	r24, r25
 4d4:	49 f0       	breq	.+18     	; 0x4e8 <A_3_4_1+0xaa>
 4d6:	18 c1       	rjmp	.+560    	; 0x708 <A_3_4_1+0x2ca>
 4d8:	82 30       	cpi	r24, 0x02	; 2
 4da:	91 05       	cpc	r25, r1
 4dc:	09 f4       	brne	.+2      	; 0x4e0 <A_3_4_1+0xa2>
 4de:	cd c0       	rjmp	.+410    	; 0x67a <A_3_4_1+0x23c>
 4e0:	03 97       	sbiw	r24, 0x03	; 3
 4e2:	09 f4       	brne	.+2      	; 0x4e6 <A_3_4_1+0xa8>
 4e4:	d9 c0       	rjmp	.+434    	; 0x698 <A_3_4_1+0x25a>
 4e6:	10 c1       	rjmp	.+544    	; 0x708 <A_3_4_1+0x2ca>
			case 0:
				UsartPuts("Start drücken:\n");
 4e8:	8e ec       	ldi	r24, 0xCE	; 206
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0e 94 aa 04 	call	0x954	; 0x954 <UsartPuts>
				if(BIT_IS_SET(TASTER_PIN, TASTER_START)){
 4f0:	86 e3       	ldi	r24, 0x36	; 54
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	fc 01       	movw	r30, r24
 4f6:	80 81       	ld	r24, Z
 4f8:	88 23       	and	r24, r24
 4fa:	0c f0       	brlt	.+2      	; 0x4fe <A_3_4_1+0xc0>
 4fc:	0c c1       	rjmp	.+536    	; 0x716 <A_3_4_1+0x2d8>
					state = 1;
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
					waitTime = TCNT0 % 10 + 1;
 504:	82 e5       	ldi	r24, 0x52	; 82
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	fc 01       	movw	r30, r24
 50a:	90 81       	ld	r25, Z
 50c:	8d ec       	ldi	r24, 0xCD	; 205
 50e:	98 9f       	mul	r25, r24
 510:	81 2d       	mov	r24, r1
 512:	11 24       	eor	r1, r1
 514:	86 95       	lsr	r24
 516:	86 95       	lsr	r24
 518:	86 95       	lsr	r24
 51a:	88 0f       	add	r24, r24
 51c:	28 2f       	mov	r18, r24
 51e:	22 0f       	add	r18, r18
 520:	22 0f       	add	r18, r18
 522:	82 0f       	add	r24, r18
 524:	f9 2f       	mov	r31, r25
 526:	f8 1b       	sub	r31, r24
 528:	8f 2f       	mov	r24, r31
 52a:	8f 5f       	subi	r24, 0xFF	; 255
 52c:	8a 83       	std	Y+2, r24	; 0x02
					led = TCNT0 % 7;
 52e:	82 e5       	ldi	r24, 0x52	; 82
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	fc 01       	movw	r30, r24
 534:	90 81       	ld	r25, Z
 536:	85 e2       	ldi	r24, 0x25	; 37
 538:	98 9f       	mul	r25, r24
 53a:	81 2d       	mov	r24, r1
 53c:	11 24       	eor	r1, r1
 53e:	29 2f       	mov	r18, r25
 540:	28 1b       	sub	r18, r24
 542:	26 95       	lsr	r18
 544:	82 0f       	add	r24, r18
 546:	28 2f       	mov	r18, r24
 548:	26 95       	lsr	r18
 54a:	26 95       	lsr	r18
 54c:	82 2f       	mov	r24, r18
 54e:	88 0f       	add	r24, r24
 550:	88 0f       	add	r24, r24
 552:	88 0f       	add	r24, r24
 554:	82 1b       	sub	r24, r18
 556:	f9 2f       	mov	r31, r25
 558:	f8 1b       	sub	r31, r24
 55a:	8f 2f       	mov	r24, r31
 55c:	89 83       	std	Y+1, r24	; 0x01
					WaitTimer0_x_10ms(5 * WAIT_EN);
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	0e 94 00 01 	call	0x200	; 0x200 <WaitTimer0_x_10ms>
					
					while (BIT_IS_SET(TASTER_PIN, TASTER_START))
 564:	00 00       	nop
 566:	86 e3       	ldi	r24, 0x36	; 54
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	fc 01       	movw	r30, r24
 56c:	80 81       	ld	r24, Z
 56e:	88 23       	and	r24, r24
 570:	d4 f3       	brlt	.-12     	; 0x566 <A_3_4_1+0x128>
					{
					}
				}
				break;
 572:	d1 c0       	rjmp	.+418    	; 0x716 <A_3_4_1+0x2d8>
 			case 1:
					WaitTimer0_x_10ms(waitTime * TIME_FAKTOR * WAIT_EN);
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	0e 94 00 01 	call	0x200	; 0x200 <WaitTimer0_x_10ms>
					if(BIT_IS_SET(TASTER_PIN, 6) || BIT_IS_SET(TASTER_PIN, 2)){
 57a:	86 e3       	ldi	r24, 0x36	; 54
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	fc 01       	movw	r30, r24
 580:	80 81       	ld	r24, Z
 582:	88 2f       	mov	r24, r24
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	80 74       	andi	r24, 0x40	; 64
 588:	99 27       	eor	r25, r25
 58a:	89 2b       	or	r24, r25
 58c:	51 f4       	brne	.+20     	; 0x5a2 <A_3_4_1+0x164>
 58e:	86 e3       	ldi	r24, 0x36	; 54
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	fc 01       	movw	r30, r24
 594:	80 81       	ld	r24, Z
 596:	88 2f       	mov	r24, r24
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	84 70       	andi	r24, 0x04	; 4
 59c:	99 27       	eor	r25, r25
 59e:	89 2b       	or	r24, r25
 5a0:	c9 f0       	breq	.+50     	; 0x5d4 <A_3_4_1+0x196>
						UsartPuts("Nimm die Botten weg und Bescheis nicht!");
 5a2:	8e ed       	ldi	r24, 0xDE	; 222
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	0e 94 aa 04 	call	0x954	; 0x954 <UsartPuts>
						while(BIT_IS_SET(TASTER_PIN, 6) || BIT_IS_SET(TASTER_PIN, 2)) {
 5aa:	00 00       	nop
 5ac:	86 e3       	ldi	r24, 0x36	; 54
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	fc 01       	movw	r30, r24
 5b2:	80 81       	ld	r24, Z
 5b4:	88 2f       	mov	r24, r24
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	80 74       	andi	r24, 0x40	; 64
 5ba:	99 27       	eor	r25, r25
 5bc:	89 2b       	or	r24, r25
 5be:	b1 f7       	brne	.-20     	; 0x5ac <A_3_4_1+0x16e>
 5c0:	86 e3       	ldi	r24, 0x36	; 54
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	fc 01       	movw	r30, r24
 5c6:	80 81       	ld	r24, Z
 5c8:	88 2f       	mov	r24, r24
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	84 70       	andi	r24, 0x04	; 4
 5ce:	99 27       	eor	r25, r25
 5d0:	89 2b       	or	r24, r25
 5d2:	61 f7       	brne	.-40     	; 0x5ac <A_3_4_1+0x16e>
							
						}
					}
					TCCR0 |= (1 << CS01) | (1 << CS00);
 5d4:	83 e5       	ldi	r24, 0x53	; 83
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	23 e5       	ldi	r18, 0x53	; 83
 5da:	30 e0       	ldi	r19, 0x00	; 0
 5dc:	f9 01       	movw	r30, r18
 5de:	20 81       	ld	r18, Z
 5e0:	23 60       	ori	r18, 0x03	; 3
 5e2:	fc 01       	movw	r30, r24
 5e4:	20 83       	st	Z, r18
					TCCR0 &= ~(1 << CS02);
 5e6:	83 e5       	ldi	r24, 0x53	; 83
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	23 e5       	ldi	r18, 0x53	; 83
 5ec:	30 e0       	ldi	r19, 0x00	; 0
 5ee:	f9 01       	movw	r30, r18
 5f0:	20 81       	ld	r18, Z
 5f2:	2b 7f       	andi	r18, 0xFB	; 251
 5f4:	fc 01       	movw	r30, r24
 5f6:	20 83       	st	Z, r18
					TIMSK |= (0<<TOIE0) | (1<<OCIE0);
 5f8:	89 e5       	ldi	r24, 0x59	; 89
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	29 e5       	ldi	r18, 0x59	; 89
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	f9 01       	movw	r30, r18
 602:	20 81       	ld	r18, Z
 604:	22 60       	ori	r18, 0x02	; 2
 606:	fc 01       	movw	r30, r24
 608:	20 83       	st	Z, r18
					OCR0 = 249;
 60a:	8c e5       	ldi	r24, 0x5C	; 92
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	29 ef       	ldi	r18, 0xF9	; 249
 610:	fc 01       	movw	r30, r24
 612:	20 83       	st	Z, r18
					milliSec = 0;
 614:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <milliSec+0x1>
 618:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <milliSec>
					state = 2;
 61c:	82 e0       	ldi	r24, 0x02	; 2
 61e:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
					sei();
 622:	78 94       	sei
					SET_BIT(LED_PORT, led);
 624:	85 e3       	ldi	r24, 0x35	; 53
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	25 e3       	ldi	r18, 0x35	; 53
 62a:	30 e0       	ldi	r19, 0x00	; 0
 62c:	f9 01       	movw	r30, r18
 62e:	20 81       	ld	r18, Z
 630:	62 2f       	mov	r22, r18
 632:	29 81       	ldd	r18, Y+1	; 0x01
 634:	42 2f       	mov	r20, r18
 636:	50 e0       	ldi	r21, 0x00	; 0
 638:	21 e0       	ldi	r18, 0x01	; 1
 63a:	30 e0       	ldi	r19, 0x00	; 0
 63c:	02 c0       	rjmp	.+4      	; 0x642 <A_3_4_1+0x204>
 63e:	22 0f       	add	r18, r18
 640:	33 1f       	adc	r19, r19
 642:	4a 95       	dec	r20
 644:	e2 f7       	brpl	.-8      	; 0x63e <A_3_4_1+0x200>
 646:	26 2b       	or	r18, r22
 648:	fc 01       	movw	r30, r24
 64a:	20 83       	st	Z, r18
					TCNT0 = 0;
 64c:	82 e5       	ldi	r24, 0x52	; 82
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	fc 01       	movw	r30, r24
 652:	10 82       	st	Z, r1
					
					GICR |= (1 << INT2);
 654:	8b e5       	ldi	r24, 0x5B	; 91
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	2b e5       	ldi	r18, 0x5B	; 91
 65a:	30 e0       	ldi	r19, 0x00	; 0
 65c:	f9 01       	movw	r30, r18
 65e:	20 81       	ld	r18, Z
 660:	20 62       	ori	r18, 0x20	; 32
 662:	fc 01       	movw	r30, r24
 664:	20 83       	st	Z, r18
					MCUCSR |= (1 << ISC2);
 666:	84 e5       	ldi	r24, 0x54	; 84
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	24 e5       	ldi	r18, 0x54	; 84
 66c:	30 e0       	ldi	r19, 0x00	; 0
 66e:	f9 01       	movw	r30, r18
 670:	20 81       	ld	r18, Z
 672:	20 64       	ori	r18, 0x40	; 64
 674:	fc 01       	movw	r30, r24
 676:	20 83       	st	Z, r18
				break;
 678:	51 c0       	rjmp	.+162    	; 0x71c <A_3_4_1+0x2de>
			case 2:
				if(BIT_IS_SET(TASTER_PIN, 6)){
 67a:	86 e3       	ldi	r24, 0x36	; 54
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	fc 01       	movw	r30, r24
 680:	80 81       	ld	r24, Z
 682:	88 2f       	mov	r24, r24
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	80 74       	andi	r24, 0x40	; 64
 688:	99 27       	eor	r25, r25
 68a:	89 2b       	or	r24, r25
 68c:	09 f4       	brne	.+2      	; 0x690 <A_3_4_1+0x252>
 68e:	45 c0       	rjmp	.+138    	; 0x71a <A_3_4_1+0x2dc>
					state = 3;
 690:	83 e0       	ldi	r24, 0x03	; 3
 692:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
				}
				break;
 696:	41 c0       	rjmp	.+130    	; 0x71a <A_3_4_1+0x2dc>
			case 3:
				GICR &= ~(1 << INT2);
 698:	8b e5       	ldi	r24, 0x5B	; 91
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	2b e5       	ldi	r18, 0x5B	; 91
 69e:	30 e0       	ldi	r19, 0x00	; 0
 6a0:	f9 01       	movw	r30, r18
 6a2:	20 81       	ld	r18, Z
 6a4:	2f 7d       	andi	r18, 0xDF	; 223
 6a6:	fc 01       	movw	r30, r24
 6a8:	20 83       	st	Z, r18
				TIMSK &= ~(1 << OCIE0);
 6aa:	89 e5       	ldi	r24, 0x59	; 89
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	29 e5       	ldi	r18, 0x59	; 89
 6b0:	30 e0       	ldi	r19, 0x00	; 0
 6b2:	f9 01       	movw	r30, r18
 6b4:	20 81       	ld	r18, Z
 6b6:	2d 7f       	andi	r18, 0xFD	; 253
 6b8:	fc 01       	movw	r30, r24
 6ba:	20 83       	st	Z, r18
				reactionTime = uint16ToString(milliSec);
 6bc:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <milliSec>
 6c0:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <milliSec+0x1>
 6c4:	0e 94 81 01 	call	0x302	; 0x302 <uint16ToString>
 6c8:	9c 83       	std	Y+4, r25	; 0x04
 6ca:	8b 83       	std	Y+3, r24	; 0x03
				UsartPuts("Deine Reaktionszeit sind ");
 6cc:	86 e0       	ldi	r24, 0x06	; 6
 6ce:	91 e0       	ldi	r25, 0x01	; 1
 6d0:	0e 94 aa 04 	call	0x954	; 0x954 <UsartPuts>
				UsartPuts(reactionTime);
 6d4:	8b 81       	ldd	r24, Y+3	; 0x03
 6d6:	9c 81       	ldd	r25, Y+4	; 0x04
 6d8:	0e 94 aa 04 	call	0x954	; 0x954 <UsartPuts>
				UsartPuts("sek.\n");
 6dc:	80 e2       	ldi	r24, 0x20	; 32
 6de:	91 e0       	ldi	r25, 0x01	; 1
 6e0:	0e 94 aa 04 	call	0x954	; 0x954 <UsartPuts>
				state = 0;
 6e4:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <__data_end>
				free(reactionTime);
 6e8:	8b 81       	ldd	r24, Y+3	; 0x03
 6ea:	9c 81       	ldd	r25, Y+4	; 0x04
 6ec:	0e 94 ad 05 	call	0xb5a	; 0xb5a <free>
				
				while(BIT_IS_SET(TASTER_PIN, 6)){
 6f0:	00 00       	nop
 6f2:	86 e3       	ldi	r24, 0x36	; 54
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	fc 01       	movw	r30, r24
 6f8:	80 81       	ld	r24, Z
 6fa:	88 2f       	mov	r24, r24
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	80 74       	andi	r24, 0x40	; 64
 700:	99 27       	eor	r25, r25
 702:	89 2b       	or	r24, r25
 704:	b1 f7       	brne	.-20     	; 0x6f2 <A_3_4_1+0x2b4>
					
				}
				break;
 706:	0a c0       	rjmp	.+20     	; 0x71c <A_3_4_1+0x2de>
			default:
				UsartPuts("Fehler aufgetreten!\n");
 708:	86 e2       	ldi	r24, 0x26	; 38
 70a:	91 e0       	ldi	r25, 0x01	; 1
 70c:	0e 94 aa 04 	call	0x954	; 0x954 <UsartPuts>
				state = 0;
 710:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <__data_end>
				break;
 714:	03 c0       	rjmp	.+6      	; 0x71c <A_3_4_1+0x2de>
					
					while (BIT_IS_SET(TASTER_PIN, TASTER_START))
					{
					}
				}
				break;
 716:	00 00       	nop
 718:	d1 ce       	rjmp	.-606    	; 0x4bc <A_3_4_1+0x7e>
				break;
			case 2:
				if(BIT_IS_SET(TASTER_PIN, 6)){
					state = 3;
				}
				break;
 71a:	00 00       	nop
			default:
				UsartPuts("Fehler aufgetreten!\n");
				state = 0;
				break;
		}
	}
 71c:	cf ce       	rjmp	.-610    	; 0x4bc <A_3_4_1+0x7e>

0000071e <main>:
#include "Labor_3/MPT_LAB_3_3.h"
#include "Labor_3/MPT_LAB_3_4.h"


int main(void)
{	
 71e:	cf 93       	push	r28
 720:	df 93       	push	r29
 722:	cd b7       	in	r28, 0x3d	; 61
 724:	de b7       	in	r29, 0x3e	; 62

  //------------------------------------------------------------------------------
  // Hausaufgabe A_3_4: Entwickeln eines Reaktionstesters
  // A_3_4_1: Reaktionstester mit Zeitmessung über Timer0 und Terminalausgabe
  //------------------------------------------------------------------------------
  A_3_4_1();
 726:	0e 94 1f 02 	call	0x43e	; 0x43e <A_3_4_1>


  while(1)
  {
      //TODO:: Please write your application code 
  }
 72a:	ff cf       	rjmp	.-2      	; 0x72a <main+0xc>

0000072c <UsartInit>:
}	
//#endif


void UsartInit(uint8_t CharBits, uint8_t ParBit, uint8_t StopBits, uint32_t Baudrate)
{
 72c:	0f 93       	push	r16
 72e:	1f 93       	push	r17
 730:	cf 93       	push	r28
 732:	df 93       	push	r29
 734:	cd b7       	in	r28, 0x3d	; 61
 736:	de b7       	in	r29, 0x3e	; 62
 738:	27 97       	sbiw	r28, 0x07	; 7
 73a:	0f b6       	in	r0, 0x3f	; 63
 73c:	f8 94       	cli
 73e:	de bf       	out	0x3e, r29	; 62
 740:	0f be       	out	0x3f, r0	; 63
 742:	cd bf       	out	0x3d, r28	; 61
 744:	89 83       	std	Y+1, r24	; 0x01
 746:	6a 83       	std	Y+2, r22	; 0x02
 748:	4b 83       	std	Y+3, r20	; 0x03
 74a:	0c 83       	std	Y+4, r16	; 0x04
 74c:	1d 83       	std	Y+5, r17	; 0x05
 74e:	2e 83       	std	Y+6, r18	; 0x06
 750:	3f 83       	std	Y+7, r19	; 0x07
	// Vorhandensein und Art des Paritäts-Bits festlegen:
	// Gerade   Parität: Anzahl der '1' wird auf gerade Anzahl ergänzt
	// Ungerade Parität: Anzahl der '1' wird auf ungerade Anzahl ergänzt
	// Keine    Parität: Paritäts-Bit entfällt
  if (ParBit == USART_EVEN_PARITY)
 752:	8a 81       	ldd	r24, Y+2	; 0x02
 754:	81 30       	cpi	r24, 0x01	; 1
 756:	51 f4       	brne	.+20     	; 0x76c <UsartInit+0x40>
    UCSRC |= (1 << UPM1) | (0 << UPM0);  // äquivalent: UCSRC |= (1 << UPM1);
 758:	80 e4       	ldi	r24, 0x40	; 64
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	20 e4       	ldi	r18, 0x40	; 64
 75e:	30 e0       	ldi	r19, 0x00	; 0
 760:	f9 01       	movw	r30, r18
 762:	20 81       	ld	r18, Z
 764:	20 62       	ori	r18, 0x20	; 32
 766:	fc 01       	movw	r30, r24
 768:	20 83       	st	Z, r18
 76a:	15 c0       	rjmp	.+42     	; 0x796 <UsartInit+0x6a>
	else
  if (ParBit == USART_ODD_PARITY)
 76c:	8a 81       	ldd	r24, Y+2	; 0x02
 76e:	82 30       	cpi	r24, 0x02	; 2
 770:	51 f4       	brne	.+20     	; 0x786 <UsartInit+0x5a>
    UCSRC |= (1 << UPM1) | (1 << UPM0);
 772:	80 e4       	ldi	r24, 0x40	; 64
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	20 e4       	ldi	r18, 0x40	; 64
 778:	30 e0       	ldi	r19, 0x00	; 0
 77a:	f9 01       	movw	r30, r18
 77c:	20 81       	ld	r18, Z
 77e:	20 63       	ori	r18, 0x30	; 48
 780:	fc 01       	movw	r30, r24
 782:	20 83       	st	Z, r18
 784:	08 c0       	rjmp	.+16     	; 0x796 <UsartInit+0x6a>
	else
    UCSRC |= (0 << UPM1) | (0 << UPM0);  // brauchen wir eigentlich nicht...
 786:	80 e4       	ldi	r24, 0x40	; 64
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	20 e4       	ldi	r18, 0x40	; 64
 78c:	30 e0       	ldi	r19, 0x00	; 0
 78e:	f9 01       	movw	r30, r18
 790:	20 81       	ld	r18, Z
 792:	fc 01       	movw	r30, r24
 794:	20 83       	st	Z, r18

  // Anzahl der Stop-Bits festlegen: 1 oder 2
  if (StopBits == 1)
 796:	8b 81       	ldd	r24, Y+3	; 0x03
 798:	81 30       	cpi	r24, 0x01	; 1
 79a:	49 f4       	brne	.+18     	; 0x7ae <UsartInit+0x82>
    UCSRC |= (0 << USBS);
 79c:	80 e4       	ldi	r24, 0x40	; 64
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	20 e4       	ldi	r18, 0x40	; 64
 7a2:	30 e0       	ldi	r19, 0x00	; 0
 7a4:	f9 01       	movw	r30, r18
 7a6:	20 81       	ld	r18, Z
 7a8:	fc 01       	movw	r30, r24
 7aa:	20 83       	st	Z, r18
 7ac:	0c c0       	rjmp	.+24     	; 0x7c6 <UsartInit+0x9a>
  else
  if (StopBits == 2)
 7ae:	8b 81       	ldd	r24, Y+3	; 0x03
 7b0:	82 30       	cpi	r24, 0x02	; 2
 7b2:	49 f4       	brne	.+18     	; 0x7c6 <UsartInit+0x9a>
    UCSRC |= (1 << USBS);
 7b4:	80 e4       	ldi	r24, 0x40	; 64
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	20 e4       	ldi	r18, 0x40	; 64
 7ba:	30 e0       	ldi	r19, 0x00	; 0
 7bc:	f9 01       	movw	r30, r18
 7be:	20 81       	ld	r18, Z
 7c0:	28 60       	ori	r18, 0x08	; 8
 7c2:	fc 01       	movw	r30, r24
 7c4:	20 83       	st	Z, r18
  // Anzahl der Zeichenbits: 5..9
  // Üblich sind 8 Bits / Zeichen.
  // Bei 9 Zeichenbits muss man die besondere Behandlung des 9.Bits beim
  // Lesen und Schreiben beachten. Diese ist in unseren Lese- und Schreibroutinen
  // nicht berücksichtigt.
  switch (CharBits)
 7c6:	89 81       	ldd	r24, Y+1	; 0x01
 7c8:	88 2f       	mov	r24, r24
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	87 30       	cpi	r24, 0x07	; 7
 7ce:	91 05       	cpc	r25, r1
 7d0:	c9 f0       	breq	.+50     	; 0x804 <UsartInit+0xd8>
 7d2:	88 30       	cpi	r24, 0x08	; 8
 7d4:	91 05       	cpc	r25, r1
 7d6:	34 f4       	brge	.+12     	; 0x7e4 <UsartInit+0xb8>
 7d8:	85 30       	cpi	r24, 0x05	; 5
 7da:	91 05       	cpc	r25, r1
 7dc:	d1 f1       	breq	.+116    	; 0x852 <UsartInit+0x126>
 7de:	06 97       	sbiw	r24, 0x06	; 6
 7e0:	39 f0       	breq	.+14     	; 0x7f0 <UsartInit+0xc4>
 7e2:	38 c0       	rjmp	.+112    	; 0x854 <UsartInit+0x128>
 7e4:	88 30       	cpi	r24, 0x08	; 8
 7e6:	91 05       	cpc	r25, r1
 7e8:	b9 f0       	breq	.+46     	; 0x818 <UsartInit+0xec>
 7ea:	09 97       	sbiw	r24, 0x09	; 9
 7ec:	f9 f0       	breq	.+62     	; 0x82c <UsartInit+0x100>
 7ee:	32 c0       	rjmp	.+100    	; 0x854 <UsartInit+0x128>
  {
    case 5: // 5 Zeichenbits
      break;

    case 6: // 6 Zeichenbits
      UCSRC |= (1 << UCSZ0);
 7f0:	80 e4       	ldi	r24, 0x40	; 64
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	20 e4       	ldi	r18, 0x40	; 64
 7f6:	30 e0       	ldi	r19, 0x00	; 0
 7f8:	f9 01       	movw	r30, r18
 7fa:	20 81       	ld	r18, Z
 7fc:	22 60       	ori	r18, 0x02	; 2
 7fe:	fc 01       	movw	r30, r24
 800:	20 83       	st	Z, r18
      break;
 802:	28 c0       	rjmp	.+80     	; 0x854 <UsartInit+0x128>

    case 7: // 7 Zeichenbits
      UCSRC |= (1 << UCSZ1);
 804:	80 e4       	ldi	r24, 0x40	; 64
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	20 e4       	ldi	r18, 0x40	; 64
 80a:	30 e0       	ldi	r19, 0x00	; 0
 80c:	f9 01       	movw	r30, r18
 80e:	20 81       	ld	r18, Z
 810:	24 60       	ori	r18, 0x04	; 4
 812:	fc 01       	movw	r30, r24
 814:	20 83       	st	Z, r18
      break;
 816:	1e c0       	rjmp	.+60     	; 0x854 <UsartInit+0x128>

    case 8: // 8 Zeichenbits
      UCSRC |= (1 << UCSZ1) | (1 << UCSZ0);
 818:	80 e4       	ldi	r24, 0x40	; 64
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	20 e4       	ldi	r18, 0x40	; 64
 81e:	30 e0       	ldi	r19, 0x00	; 0
 820:	f9 01       	movw	r30, r18
 822:	20 81       	ld	r18, Z
 824:	26 60       	ori	r18, 0x06	; 6
 826:	fc 01       	movw	r30, r24
 828:	20 83       	st	Z, r18
      break;
 82a:	14 c0       	rjmp	.+40     	; 0x854 <UsartInit+0x128>

    case 9: // 9 Zeichenbits
      UCSRB |= (1 << UCSZ2);
 82c:	8a e2       	ldi	r24, 0x2A	; 42
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	2a e2       	ldi	r18, 0x2A	; 42
 832:	30 e0       	ldi	r19, 0x00	; 0
 834:	f9 01       	movw	r30, r18
 836:	20 81       	ld	r18, Z
 838:	24 60       	ori	r18, 0x04	; 4
 83a:	fc 01       	movw	r30, r24
 83c:	20 83       	st	Z, r18
      UCSRC |= (1 << UCSZ1) | (1 << UCSZ0);
 83e:	80 e4       	ldi	r24, 0x40	; 64
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	20 e4       	ldi	r18, 0x40	; 64
 844:	30 e0       	ldi	r19, 0x00	; 0
 846:	f9 01       	movw	r30, r18
 848:	20 81       	ld	r18, Z
 84a:	26 60       	ori	r18, 0x06	; 6
 84c:	fc 01       	movw	r30, r24
 84e:	20 83       	st	Z, r18
      break;
 850:	01 c0       	rjmp	.+2      	; 0x854 <UsartInit+0x128>
  // Lesen und Schreiben beachten. Diese ist in unseren Lese- und Schreibroutinen
  // nicht berücksichtigt.
  switch (CharBits)
  {
    case 5: // 5 Zeichenbits
      break;
 852:	00 00       	nop
  // Bei der Wahl der Bitrate muss der relative Bitratenfehler
  // aufgrund der Taktfrequenz des uC beachtet werden.
  // Dieser wirkt sich bei höheren Bitraten stärker aus, daher
  // darf bei großem Bitratenfehler die Bitrate nicht zu groß
  // gewählt werden.
  UBRRL = (F_CPU/(16*Baudrate)-1) % 256;
 854:	09 e2       	ldi	r16, 0x29	; 41
 856:	10 e0       	ldi	r17, 0x00	; 0
 858:	8c 81       	ldd	r24, Y+4	; 0x04
 85a:	9d 81       	ldd	r25, Y+5	; 0x05
 85c:	ae 81       	ldd	r26, Y+6	; 0x06
 85e:	bf 81       	ldd	r27, Y+7	; 0x07
 860:	88 0f       	add	r24, r24
 862:	99 1f       	adc	r25, r25
 864:	aa 1f       	adc	r26, r26
 866:	bb 1f       	adc	r27, r27
 868:	88 0f       	add	r24, r24
 86a:	99 1f       	adc	r25, r25
 86c:	aa 1f       	adc	r26, r26
 86e:	bb 1f       	adc	r27, r27
 870:	88 0f       	add	r24, r24
 872:	99 1f       	adc	r25, r25
 874:	aa 1f       	adc	r26, r26
 876:	bb 1f       	adc	r27, r27
 878:	88 0f       	add	r24, r24
 87a:	99 1f       	adc	r25, r25
 87c:	aa 1f       	adc	r26, r26
 87e:	bb 1f       	adc	r27, r27
 880:	9c 01       	movw	r18, r24
 882:	ad 01       	movw	r20, r26
 884:	80 e0       	ldi	r24, 0x00	; 0
 886:	94 e2       	ldi	r25, 0x24	; 36
 888:	a4 ef       	ldi	r26, 0xF4	; 244
 88a:	b0 e0       	ldi	r27, 0x00	; 0
 88c:	bc 01       	movw	r22, r24
 88e:	cd 01       	movw	r24, r26
 890:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__udivmodsi4>
 894:	da 01       	movw	r26, r20
 896:	c9 01       	movw	r24, r18
 898:	81 50       	subi	r24, 0x01	; 1
 89a:	f8 01       	movw	r30, r16
 89c:	80 83       	st	Z, r24
  UBRRH = (F_CPU/(16*Baudrate)-1) / 256;
 89e:	00 e4       	ldi	r16, 0x40	; 64
 8a0:	10 e0       	ldi	r17, 0x00	; 0
 8a2:	8c 81       	ldd	r24, Y+4	; 0x04
 8a4:	9d 81       	ldd	r25, Y+5	; 0x05
 8a6:	ae 81       	ldd	r26, Y+6	; 0x06
 8a8:	bf 81       	ldd	r27, Y+7	; 0x07
 8aa:	88 0f       	add	r24, r24
 8ac:	99 1f       	adc	r25, r25
 8ae:	aa 1f       	adc	r26, r26
 8b0:	bb 1f       	adc	r27, r27
 8b2:	88 0f       	add	r24, r24
 8b4:	99 1f       	adc	r25, r25
 8b6:	aa 1f       	adc	r26, r26
 8b8:	bb 1f       	adc	r27, r27
 8ba:	88 0f       	add	r24, r24
 8bc:	99 1f       	adc	r25, r25
 8be:	aa 1f       	adc	r26, r26
 8c0:	bb 1f       	adc	r27, r27
 8c2:	88 0f       	add	r24, r24
 8c4:	99 1f       	adc	r25, r25
 8c6:	aa 1f       	adc	r26, r26
 8c8:	bb 1f       	adc	r27, r27
 8ca:	9c 01       	movw	r18, r24
 8cc:	ad 01       	movw	r20, r26
 8ce:	80 e0       	ldi	r24, 0x00	; 0
 8d0:	94 e2       	ldi	r25, 0x24	; 36
 8d2:	a4 ef       	ldi	r26, 0xF4	; 244
 8d4:	b0 e0       	ldi	r27, 0x00	; 0
 8d6:	bc 01       	movw	r22, r24
 8d8:	cd 01       	movw	r24, r26
 8da:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__udivmodsi4>
 8de:	da 01       	movw	r26, r20
 8e0:	c9 01       	movw	r24, r18
 8e2:	01 97       	sbiw	r24, 0x01	; 1
 8e4:	a1 09       	sbc	r26, r1
 8e6:	b1 09       	sbc	r27, r1
 8e8:	89 2f       	mov	r24, r25
 8ea:	9a 2f       	mov	r25, r26
 8ec:	ab 2f       	mov	r26, r27
 8ee:	bb 27       	eor	r27, r27
 8f0:	f8 01       	movw	r30, r16
 8f2:	80 83       	st	Z, r24

  // Freigabe der Sende-/Empfangs-Kanäle und uC-Pins
  UCSRB |= (1 << RXEN) | (1 << TXEN);
 8f4:	8a e2       	ldi	r24, 0x2A	; 42
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	2a e2       	ldi	r18, 0x2A	; 42
 8fa:	30 e0       	ldi	r19, 0x00	; 0
 8fc:	f9 01       	movw	r30, r18
 8fe:	20 81       	ld	r18, Z
 900:	28 61       	ori	r18, 0x18	; 24
 902:	fc 01       	movw	r30, r24
 904:	20 83       	st	Z, r18
}
 906:	00 00       	nop
 908:	27 96       	adiw	r28, 0x07	; 7
 90a:	0f b6       	in	r0, 0x3f	; 63
 90c:	f8 94       	cli
 90e:	de bf       	out	0x3e, r29	; 62
 910:	0f be       	out	0x3f, r0	; 63
 912:	cd bf       	out	0x3d, r28	; 61
 914:	df 91       	pop	r29
 916:	cf 91       	pop	r28
 918:	1f 91       	pop	r17
 91a:	0f 91       	pop	r16
 91c:	08 95       	ret

0000091e <UsartPutc>:

/*
 *  1 Zeichen auf USART-Kanal ausgeben
 */
void UsartPutc(uint8_t Data)
{
 91e:	cf 93       	push	r28
 920:	df 93       	push	r29
 922:	1f 92       	push	r1
 924:	cd b7       	in	r28, 0x3d	; 61
 926:	de b7       	in	r29, 0x3e	; 62
 928:	89 83       	std	Y+1, r24	; 0x01
  while (!(UCSRA & (1 << UDRE)));
 92a:	00 00       	nop
 92c:	8b e2       	ldi	r24, 0x2B	; 43
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	fc 01       	movw	r30, r24
 932:	80 81       	ld	r24, Z
 934:	88 2f       	mov	r24, r24
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	80 72       	andi	r24, 0x20	; 32
 93a:	99 27       	eor	r25, r25
 93c:	89 2b       	or	r24, r25
 93e:	b1 f3       	breq	.-20     	; 0x92c <UsartPutc+0xe>
  UDR = Data;
 940:	8c e2       	ldi	r24, 0x2C	; 44
 942:	90 e0       	ldi	r25, 0x00	; 0
 944:	29 81       	ldd	r18, Y+1	; 0x01
 946:	fc 01       	movw	r30, r24
 948:	20 83       	st	Z, r18
}
 94a:	00 00       	nop
 94c:	0f 90       	pop	r0
 94e:	df 91       	pop	r29
 950:	cf 91       	pop	r28
 952:	08 95       	ret

00000954 <UsartPuts>:

/*
 *  String auf USART-Kanal ausgeben
 */
void UsartPuts(char* pString)
{
 954:	cf 93       	push	r28
 956:	df 93       	push	r29
 958:	00 d0       	rcall	.+0      	; 0x95a <UsartPuts+0x6>
 95a:	00 d0       	rcall	.+0      	; 0x95c <UsartPuts+0x8>
 95c:	cd b7       	in	r28, 0x3d	; 61
 95e:	de b7       	in	r29, 0x3e	; 62
 960:	9c 83       	std	Y+4, r25	; 0x04
 962:	8b 83       	std	Y+3, r24	; 0x03
	char* pData = pString;
 964:	8b 81       	ldd	r24, Y+3	; 0x03
 966:	9c 81       	ldd	r25, Y+4	; 0x04
 968:	9a 83       	std	Y+2, r25	; 0x02
 96a:	89 83       	std	Y+1, r24	; 0x01
	
  while (*pData != 0)
 96c:	0b c0       	rjmp	.+22     	; 0x984 <UsartPuts+0x30>
  {
    UsartPutc(*pData);
 96e:	89 81       	ldd	r24, Y+1	; 0x01
 970:	9a 81       	ldd	r25, Y+2	; 0x02
 972:	fc 01       	movw	r30, r24
 974:	80 81       	ld	r24, Z
 976:	0e 94 8f 04 	call	0x91e	; 0x91e <UsartPutc>
	  pData++;
 97a:	89 81       	ldd	r24, Y+1	; 0x01
 97c:	9a 81       	ldd	r25, Y+2	; 0x02
 97e:	01 96       	adiw	r24, 0x01	; 1
 980:	9a 83       	std	Y+2, r25	; 0x02
 982:	89 83       	std	Y+1, r24	; 0x01
 */
void UsartPuts(char* pString)
{
	char* pData = pString;
	
  while (*pData != 0)
 984:	89 81       	ldd	r24, Y+1	; 0x01
 986:	9a 81       	ldd	r25, Y+2	; 0x02
 988:	fc 01       	movw	r30, r24
 98a:	80 81       	ld	r24, Z
 98c:	88 23       	and	r24, r24
 98e:	79 f7       	brne	.-34     	; 0x96e <UsartPuts+0x1a>
  {
    UsartPutc(*pData);
	  pData++;
  }	
}
 990:	00 00       	nop
 992:	0f 90       	pop	r0
 994:	0f 90       	pop	r0
 996:	0f 90       	pop	r0
 998:	0f 90       	pop	r0
 99a:	df 91       	pop	r29
 99c:	cf 91       	pop	r28
 99e:	08 95       	ret

000009a0 <__udivmodhi4>:
 9a0:	aa 1b       	sub	r26, r26
 9a2:	bb 1b       	sub	r27, r27
 9a4:	51 e1       	ldi	r21, 0x11	; 17
 9a6:	07 c0       	rjmp	.+14     	; 0x9b6 <__udivmodhi4_ep>

000009a8 <__udivmodhi4_loop>:
 9a8:	aa 1f       	adc	r26, r26
 9aa:	bb 1f       	adc	r27, r27
 9ac:	a6 17       	cp	r26, r22
 9ae:	b7 07       	cpc	r27, r23
 9b0:	10 f0       	brcs	.+4      	; 0x9b6 <__udivmodhi4_ep>
 9b2:	a6 1b       	sub	r26, r22
 9b4:	b7 0b       	sbc	r27, r23

000009b6 <__udivmodhi4_ep>:
 9b6:	88 1f       	adc	r24, r24
 9b8:	99 1f       	adc	r25, r25
 9ba:	5a 95       	dec	r21
 9bc:	a9 f7       	brne	.-22     	; 0x9a8 <__udivmodhi4_loop>
 9be:	80 95       	com	r24
 9c0:	90 95       	com	r25
 9c2:	bc 01       	movw	r22, r24
 9c4:	cd 01       	movw	r24, r26
 9c6:	08 95       	ret

000009c8 <__udivmodsi4>:
 9c8:	a1 e2       	ldi	r26, 0x21	; 33
 9ca:	1a 2e       	mov	r1, r26
 9cc:	aa 1b       	sub	r26, r26
 9ce:	bb 1b       	sub	r27, r27
 9d0:	fd 01       	movw	r30, r26
 9d2:	0d c0       	rjmp	.+26     	; 0x9ee <__udivmodsi4_ep>

000009d4 <__udivmodsi4_loop>:
 9d4:	aa 1f       	adc	r26, r26
 9d6:	bb 1f       	adc	r27, r27
 9d8:	ee 1f       	adc	r30, r30
 9da:	ff 1f       	adc	r31, r31
 9dc:	a2 17       	cp	r26, r18
 9de:	b3 07       	cpc	r27, r19
 9e0:	e4 07       	cpc	r30, r20
 9e2:	f5 07       	cpc	r31, r21
 9e4:	20 f0       	brcs	.+8      	; 0x9ee <__udivmodsi4_ep>
 9e6:	a2 1b       	sub	r26, r18
 9e8:	b3 0b       	sbc	r27, r19
 9ea:	e4 0b       	sbc	r30, r20
 9ec:	f5 0b       	sbc	r31, r21

000009ee <__udivmodsi4_ep>:
 9ee:	66 1f       	adc	r22, r22
 9f0:	77 1f       	adc	r23, r23
 9f2:	88 1f       	adc	r24, r24
 9f4:	99 1f       	adc	r25, r25
 9f6:	1a 94       	dec	r1
 9f8:	69 f7       	brne	.-38     	; 0x9d4 <__udivmodsi4_loop>
 9fa:	60 95       	com	r22
 9fc:	70 95       	com	r23
 9fe:	80 95       	com	r24
 a00:	90 95       	com	r25
 a02:	9b 01       	movw	r18, r22
 a04:	ac 01       	movw	r20, r24
 a06:	bd 01       	movw	r22, r26
 a08:	cf 01       	movw	r24, r30
 a0a:	08 95       	ret

00000a0c <__umulhisi3>:
 a0c:	a2 9f       	mul	r26, r18
 a0e:	b0 01       	movw	r22, r0
 a10:	b3 9f       	mul	r27, r19
 a12:	c0 01       	movw	r24, r0
 a14:	a3 9f       	mul	r26, r19
 a16:	70 0d       	add	r23, r0
 a18:	81 1d       	adc	r24, r1
 a1a:	11 24       	eor	r1, r1
 a1c:	91 1d       	adc	r25, r1
 a1e:	b2 9f       	mul	r27, r18
 a20:	70 0d       	add	r23, r0
 a22:	81 1d       	adc	r24, r1
 a24:	11 24       	eor	r1, r1
 a26:	91 1d       	adc	r25, r1
 a28:	08 95       	ret

00000a2a <malloc>:
 a2a:	0f 93       	push	r16
 a2c:	1f 93       	push	r17
 a2e:	cf 93       	push	r28
 a30:	df 93       	push	r29
 a32:	82 30       	cpi	r24, 0x02	; 2
 a34:	91 05       	cpc	r25, r1
 a36:	10 f4       	brcc	.+4      	; 0xa3c <malloc+0x12>
 a38:	82 e0       	ldi	r24, 0x02	; 2
 a3a:	90 e0       	ldi	r25, 0x00	; 0
 a3c:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <__flp>
 a40:	f0 91 44 01 	lds	r31, 0x0144	; 0x800144 <__flp+0x1>
 a44:	20 e0       	ldi	r18, 0x00	; 0
 a46:	30 e0       	ldi	r19, 0x00	; 0
 a48:	a0 e0       	ldi	r26, 0x00	; 0
 a4a:	b0 e0       	ldi	r27, 0x00	; 0
 a4c:	30 97       	sbiw	r30, 0x00	; 0
 a4e:	19 f1       	breq	.+70     	; 0xa96 <malloc+0x6c>
 a50:	40 81       	ld	r20, Z
 a52:	51 81       	ldd	r21, Z+1	; 0x01
 a54:	02 81       	ldd	r16, Z+2	; 0x02
 a56:	13 81       	ldd	r17, Z+3	; 0x03
 a58:	48 17       	cp	r20, r24
 a5a:	59 07       	cpc	r21, r25
 a5c:	c8 f0       	brcs	.+50     	; 0xa90 <malloc+0x66>
 a5e:	84 17       	cp	r24, r20
 a60:	95 07       	cpc	r25, r21
 a62:	69 f4       	brne	.+26     	; 0xa7e <malloc+0x54>
 a64:	10 97       	sbiw	r26, 0x00	; 0
 a66:	31 f0       	breq	.+12     	; 0xa74 <malloc+0x4a>
 a68:	12 96       	adiw	r26, 0x02	; 2
 a6a:	0c 93       	st	X, r16
 a6c:	12 97       	sbiw	r26, 0x02	; 2
 a6e:	13 96       	adiw	r26, 0x03	; 3
 a70:	1c 93       	st	X, r17
 a72:	27 c0       	rjmp	.+78     	; 0xac2 <malloc+0x98>
 a74:	00 93 43 01 	sts	0x0143, r16	; 0x800143 <__flp>
 a78:	10 93 44 01 	sts	0x0144, r17	; 0x800144 <__flp+0x1>
 a7c:	22 c0       	rjmp	.+68     	; 0xac2 <malloc+0x98>
 a7e:	21 15       	cp	r18, r1
 a80:	31 05       	cpc	r19, r1
 a82:	19 f0       	breq	.+6      	; 0xa8a <malloc+0x60>
 a84:	42 17       	cp	r20, r18
 a86:	53 07       	cpc	r21, r19
 a88:	18 f4       	brcc	.+6      	; 0xa90 <malloc+0x66>
 a8a:	9a 01       	movw	r18, r20
 a8c:	bd 01       	movw	r22, r26
 a8e:	ef 01       	movw	r28, r30
 a90:	df 01       	movw	r26, r30
 a92:	f8 01       	movw	r30, r16
 a94:	db cf       	rjmp	.-74     	; 0xa4c <malloc+0x22>
 a96:	21 15       	cp	r18, r1
 a98:	31 05       	cpc	r19, r1
 a9a:	f9 f0       	breq	.+62     	; 0xada <malloc+0xb0>
 a9c:	28 1b       	sub	r18, r24
 a9e:	39 0b       	sbc	r19, r25
 aa0:	24 30       	cpi	r18, 0x04	; 4
 aa2:	31 05       	cpc	r19, r1
 aa4:	80 f4       	brcc	.+32     	; 0xac6 <malloc+0x9c>
 aa6:	8a 81       	ldd	r24, Y+2	; 0x02
 aa8:	9b 81       	ldd	r25, Y+3	; 0x03
 aaa:	61 15       	cp	r22, r1
 aac:	71 05       	cpc	r23, r1
 aae:	21 f0       	breq	.+8      	; 0xab8 <malloc+0x8e>
 ab0:	fb 01       	movw	r30, r22
 ab2:	93 83       	std	Z+3, r25	; 0x03
 ab4:	82 83       	std	Z+2, r24	; 0x02
 ab6:	04 c0       	rjmp	.+8      	; 0xac0 <malloc+0x96>
 ab8:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <__flp+0x1>
 abc:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__flp>
 ac0:	fe 01       	movw	r30, r28
 ac2:	32 96       	adiw	r30, 0x02	; 2
 ac4:	44 c0       	rjmp	.+136    	; 0xb4e <malloc+0x124>
 ac6:	fe 01       	movw	r30, r28
 ac8:	e2 0f       	add	r30, r18
 aca:	f3 1f       	adc	r31, r19
 acc:	81 93       	st	Z+, r24
 ace:	91 93       	st	Z+, r25
 ad0:	22 50       	subi	r18, 0x02	; 2
 ad2:	31 09       	sbc	r19, r1
 ad4:	39 83       	std	Y+1, r19	; 0x01
 ad6:	28 83       	st	Y, r18
 ad8:	3a c0       	rjmp	.+116    	; 0xb4e <malloc+0x124>
 ada:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <__brkval>
 ade:	30 91 42 01 	lds	r19, 0x0142	; 0x800142 <__brkval+0x1>
 ae2:	23 2b       	or	r18, r19
 ae4:	41 f4       	brne	.+16     	; 0xaf6 <malloc+0xcc>
 ae6:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
 aea:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
 aee:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__brkval+0x1>
 af2:	20 93 41 01 	sts	0x0141, r18	; 0x800141 <__brkval>
 af6:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 afa:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 afe:	21 15       	cp	r18, r1
 b00:	31 05       	cpc	r19, r1
 b02:	41 f4       	brne	.+16     	; 0xb14 <malloc+0xea>
 b04:	2d b7       	in	r18, 0x3d	; 61
 b06:	3e b7       	in	r19, 0x3e	; 62
 b08:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
 b0c:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
 b10:	24 1b       	sub	r18, r20
 b12:	35 0b       	sbc	r19, r21
 b14:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <__brkval>
 b18:	f0 91 42 01 	lds	r31, 0x0142	; 0x800142 <__brkval+0x1>
 b1c:	e2 17       	cp	r30, r18
 b1e:	f3 07       	cpc	r31, r19
 b20:	a0 f4       	brcc	.+40     	; 0xb4a <malloc+0x120>
 b22:	2e 1b       	sub	r18, r30
 b24:	3f 0b       	sbc	r19, r31
 b26:	28 17       	cp	r18, r24
 b28:	39 07       	cpc	r19, r25
 b2a:	78 f0       	brcs	.+30     	; 0xb4a <malloc+0x120>
 b2c:	ac 01       	movw	r20, r24
 b2e:	4e 5f       	subi	r20, 0xFE	; 254
 b30:	5f 4f       	sbci	r21, 0xFF	; 255
 b32:	24 17       	cp	r18, r20
 b34:	35 07       	cpc	r19, r21
 b36:	48 f0       	brcs	.+18     	; 0xb4a <malloc+0x120>
 b38:	4e 0f       	add	r20, r30
 b3a:	5f 1f       	adc	r21, r31
 b3c:	50 93 42 01 	sts	0x0142, r21	; 0x800142 <__brkval+0x1>
 b40:	40 93 41 01 	sts	0x0141, r20	; 0x800141 <__brkval>
 b44:	81 93       	st	Z+, r24
 b46:	91 93       	st	Z+, r25
 b48:	02 c0       	rjmp	.+4      	; 0xb4e <malloc+0x124>
 b4a:	e0 e0       	ldi	r30, 0x00	; 0
 b4c:	f0 e0       	ldi	r31, 0x00	; 0
 b4e:	cf 01       	movw	r24, r30
 b50:	df 91       	pop	r29
 b52:	cf 91       	pop	r28
 b54:	1f 91       	pop	r17
 b56:	0f 91       	pop	r16
 b58:	08 95       	ret

00000b5a <free>:
 b5a:	cf 93       	push	r28
 b5c:	df 93       	push	r29
 b5e:	00 97       	sbiw	r24, 0x00	; 0
 b60:	09 f4       	brne	.+2      	; 0xb64 <free+0xa>
 b62:	81 c0       	rjmp	.+258    	; 0xc66 <free+0x10c>
 b64:	fc 01       	movw	r30, r24
 b66:	32 97       	sbiw	r30, 0x02	; 2
 b68:	13 82       	std	Z+3, r1	; 0x03
 b6a:	12 82       	std	Z+2, r1	; 0x02
 b6c:	a0 91 43 01 	lds	r26, 0x0143	; 0x800143 <__flp>
 b70:	b0 91 44 01 	lds	r27, 0x0144	; 0x800144 <__flp+0x1>
 b74:	10 97       	sbiw	r26, 0x00	; 0
 b76:	81 f4       	brne	.+32     	; 0xb98 <free+0x3e>
 b78:	20 81       	ld	r18, Z
 b7a:	31 81       	ldd	r19, Z+1	; 0x01
 b7c:	82 0f       	add	r24, r18
 b7e:	93 1f       	adc	r25, r19
 b80:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <__brkval>
 b84:	30 91 42 01 	lds	r19, 0x0142	; 0x800142 <__brkval+0x1>
 b88:	28 17       	cp	r18, r24
 b8a:	39 07       	cpc	r19, r25
 b8c:	51 f5       	brne	.+84     	; 0xbe2 <free+0x88>
 b8e:	f0 93 42 01 	sts	0x0142, r31	; 0x800142 <__brkval+0x1>
 b92:	e0 93 41 01 	sts	0x0141, r30	; 0x800141 <__brkval>
 b96:	67 c0       	rjmp	.+206    	; 0xc66 <free+0x10c>
 b98:	ed 01       	movw	r28, r26
 b9a:	20 e0       	ldi	r18, 0x00	; 0
 b9c:	30 e0       	ldi	r19, 0x00	; 0
 b9e:	ce 17       	cp	r28, r30
 ba0:	df 07       	cpc	r29, r31
 ba2:	40 f4       	brcc	.+16     	; 0xbb4 <free+0x5a>
 ba4:	4a 81       	ldd	r20, Y+2	; 0x02
 ba6:	5b 81       	ldd	r21, Y+3	; 0x03
 ba8:	9e 01       	movw	r18, r28
 baa:	41 15       	cp	r20, r1
 bac:	51 05       	cpc	r21, r1
 bae:	f1 f0       	breq	.+60     	; 0xbec <free+0x92>
 bb0:	ea 01       	movw	r28, r20
 bb2:	f5 cf       	rjmp	.-22     	; 0xb9e <free+0x44>
 bb4:	d3 83       	std	Z+3, r29	; 0x03
 bb6:	c2 83       	std	Z+2, r28	; 0x02
 bb8:	40 81       	ld	r20, Z
 bba:	51 81       	ldd	r21, Z+1	; 0x01
 bbc:	84 0f       	add	r24, r20
 bbe:	95 1f       	adc	r25, r21
 bc0:	c8 17       	cp	r28, r24
 bc2:	d9 07       	cpc	r29, r25
 bc4:	59 f4       	brne	.+22     	; 0xbdc <free+0x82>
 bc6:	88 81       	ld	r24, Y
 bc8:	99 81       	ldd	r25, Y+1	; 0x01
 bca:	84 0f       	add	r24, r20
 bcc:	95 1f       	adc	r25, r21
 bce:	02 96       	adiw	r24, 0x02	; 2
 bd0:	91 83       	std	Z+1, r25	; 0x01
 bd2:	80 83       	st	Z, r24
 bd4:	8a 81       	ldd	r24, Y+2	; 0x02
 bd6:	9b 81       	ldd	r25, Y+3	; 0x03
 bd8:	93 83       	std	Z+3, r25	; 0x03
 bda:	82 83       	std	Z+2, r24	; 0x02
 bdc:	21 15       	cp	r18, r1
 bde:	31 05       	cpc	r19, r1
 be0:	29 f4       	brne	.+10     	; 0xbec <free+0x92>
 be2:	f0 93 44 01 	sts	0x0144, r31	; 0x800144 <__flp+0x1>
 be6:	e0 93 43 01 	sts	0x0143, r30	; 0x800143 <__flp>
 bea:	3d c0       	rjmp	.+122    	; 0xc66 <free+0x10c>
 bec:	e9 01       	movw	r28, r18
 bee:	fb 83       	std	Y+3, r31	; 0x03
 bf0:	ea 83       	std	Y+2, r30	; 0x02
 bf2:	49 91       	ld	r20, Y+
 bf4:	59 91       	ld	r21, Y+
 bf6:	c4 0f       	add	r28, r20
 bf8:	d5 1f       	adc	r29, r21
 bfa:	ec 17       	cp	r30, r28
 bfc:	fd 07       	cpc	r31, r29
 bfe:	61 f4       	brne	.+24     	; 0xc18 <free+0xbe>
 c00:	80 81       	ld	r24, Z
 c02:	91 81       	ldd	r25, Z+1	; 0x01
 c04:	84 0f       	add	r24, r20
 c06:	95 1f       	adc	r25, r21
 c08:	02 96       	adiw	r24, 0x02	; 2
 c0a:	e9 01       	movw	r28, r18
 c0c:	99 83       	std	Y+1, r25	; 0x01
 c0e:	88 83       	st	Y, r24
 c10:	82 81       	ldd	r24, Z+2	; 0x02
 c12:	93 81       	ldd	r25, Z+3	; 0x03
 c14:	9b 83       	std	Y+3, r25	; 0x03
 c16:	8a 83       	std	Y+2, r24	; 0x02
 c18:	e0 e0       	ldi	r30, 0x00	; 0
 c1a:	f0 e0       	ldi	r31, 0x00	; 0
 c1c:	12 96       	adiw	r26, 0x02	; 2
 c1e:	8d 91       	ld	r24, X+
 c20:	9c 91       	ld	r25, X
 c22:	13 97       	sbiw	r26, 0x03	; 3
 c24:	00 97       	sbiw	r24, 0x00	; 0
 c26:	19 f0       	breq	.+6      	; 0xc2e <free+0xd4>
 c28:	fd 01       	movw	r30, r26
 c2a:	dc 01       	movw	r26, r24
 c2c:	f7 cf       	rjmp	.-18     	; 0xc1c <free+0xc2>
 c2e:	8d 91       	ld	r24, X+
 c30:	9c 91       	ld	r25, X
 c32:	11 97       	sbiw	r26, 0x01	; 1
 c34:	9d 01       	movw	r18, r26
 c36:	2e 5f       	subi	r18, 0xFE	; 254
 c38:	3f 4f       	sbci	r19, 0xFF	; 255
 c3a:	82 0f       	add	r24, r18
 c3c:	93 1f       	adc	r25, r19
 c3e:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <__brkval>
 c42:	30 91 42 01 	lds	r19, 0x0142	; 0x800142 <__brkval+0x1>
 c46:	28 17       	cp	r18, r24
 c48:	39 07       	cpc	r19, r25
 c4a:	69 f4       	brne	.+26     	; 0xc66 <free+0x10c>
 c4c:	30 97       	sbiw	r30, 0x00	; 0
 c4e:	29 f4       	brne	.+10     	; 0xc5a <free+0x100>
 c50:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__flp+0x1>
 c54:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <__flp>
 c58:	02 c0       	rjmp	.+4      	; 0xc5e <free+0x104>
 c5a:	13 82       	std	Z+3, r1	; 0x03
 c5c:	12 82       	std	Z+2, r1	; 0x02
 c5e:	b0 93 42 01 	sts	0x0142, r27	; 0x800142 <__brkval+0x1>
 c62:	a0 93 41 01 	sts	0x0141, r26	; 0x800141 <__brkval>
 c66:	df 91       	pop	r29
 c68:	cf 91       	pop	r28
 c6a:	08 95       	ret

00000c6c <_exit>:
 c6c:	f8 94       	cli

00000c6e <__stop_program>:
 c6e:	ff cf       	rjmp	.-2      	; 0xc6e <__stop_program>
