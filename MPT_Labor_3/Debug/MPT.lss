
MPT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000260  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000015e  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000a8  00000000  00000000  00000482  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001e8  00000000  00000000  0000052a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000118  00000000  00000000  00000714  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001a5  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f7  00000000  00000000  000009d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00000bc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 80 00 	jmp	0x100	; 0x100 <__vector_10>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 ed 00 	call	0x1da	; 0x1da <main>
  74:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_11>:
	sei();
	
	while (1)
	{
		// nichts mehr zu tun ... vorerst
	}
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  84:	0f 92       	push	r0
  86:	11 24       	eor	r1, r1
  88:	2f 93       	push	r18
  8a:	3f 93       	push	r19
  8c:	8f 93       	push	r24
  8e:	9f 93       	push	r25
  90:	ef 93       	push	r30
  92:	ff 93       	push	r31
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	82 e5       	ldi	r24, 0x52	; 82
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	26 e0       	ldi	r18, 0x06	; 6
  a2:	fc 01       	movw	r30, r24
  a4:	20 83       	st	Z, r18
  a6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  aa:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  ae:	01 96       	adiw	r24, 0x01	; 1
  b0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
  b4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  b8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  bc:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  c0:	80 3d       	cpi	r24, 0xD0	; 208
  c2:	97 40       	sbci	r25, 0x07	; 7
  c4:	71 f4       	brne	.+28     	; 0xe2 <__vector_11+0x66>
  c6:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
  ca:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
  ce:	85 e3       	ldi	r24, 0x35	; 53
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	25 e3       	ldi	r18, 0x35	; 53
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	f9 01       	movw	r30, r18
  d8:	30 81       	ld	r19, Z
  da:	21 e0       	ldi	r18, 0x01	; 1
  dc:	23 27       	eor	r18, r19
  de:	fc 01       	movw	r30, r24
  e0:	20 83       	st	Z, r18
  e2:	00 00       	nop
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	ff 91       	pop	r31
  ea:	ef 91       	pop	r30
  ec:	9f 91       	pop	r25
  ee:	8f 91       	pop	r24
  f0:	3f 91       	pop	r19
  f2:	2f 91       	pop	r18
  f4:	0f 90       	pop	r0
  f6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  fa:	0f 90       	pop	r0
  fc:	1f 90       	pop	r1
  fe:	18 95       	reti

00000100 <__vector_10>:
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	2f 93       	push	r18
 10e:	3f 93       	push	r19
 110:	8f 93       	push	r24
 112:	9f 93       	push	r25
 114:	ef 93       	push	r30
 116:	ff 93       	push	r31
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	cd b7       	in	r28, 0x3d	; 61
 11e:	de b7       	in	r29, 0x3e	; 62
 120:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 124:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 128:	01 96       	adiw	r24, 0x01	; 1
 12a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 12e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 132:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 136:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 13a:	80 3d       	cpi	r24, 0xD0	; 208
 13c:	97 40       	sbci	r25, 0x07	; 7
 13e:	99 f4       	brne	.+38     	; 0x166 <__vector_10+0x66>
 140:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 144:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
 148:	85 e3       	ldi	r24, 0x35	; 53
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	25 e3       	ldi	r18, 0x35	; 53
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	f9 01       	movw	r30, r18
 152:	30 81       	ld	r19, Z
 154:	21 e0       	ldi	r18, 0x01	; 1
 156:	23 27       	eor	r18, r19
 158:	fc 01       	movw	r30, r24
 15a:	20 83       	st	Z, r18
 15c:	8c e5       	ldi	r24, 0x5C	; 92
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	2a ef       	ldi	r18, 0xFA	; 250
 162:	fc 01       	movw	r30, r24
 164:	20 83       	st	Z, r18
 166:	00 00       	nop
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	ff 91       	pop	r31
 16e:	ef 91       	pop	r30
 170:	9f 91       	pop	r25
 172:	8f 91       	pop	r24
 174:	3f 91       	pop	r19
 176:	2f 91       	pop	r18
 178:	0f 90       	pop	r0
 17a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 17e:	0f 90       	pop	r0
 180:	1f 90       	pop	r1
 182:	18 95       	reti

00000184 <A_3_2_2>:

//##############################################################################

// A_3_2_2: Blinken einer LED mit ISR auf Timer-Compare.
void A_3_2_2(void)
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	cd b7       	in	r28, 0x3d	; 61
 18a:	de b7       	in	r29, 0x3e	; 62
	// IHR_CODE_HIER ...
	// Richtungsregister für die LEDs initialisieren
	LED_DDR = 0b11111111;
 18c:	84 e3       	ldi	r24, 0x34	; 52
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	fc 01       	movw	r30, r24
 194:	20 83       	st	Z, r18

	// Alle LEDs aus!
	LED_PORT = 0b11111111;
 196:	85 e3       	ldi	r24, 0x35	; 53
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	2f ef       	ldi	r18, 0xFF	; 255
 19c:	fc 01       	movw	r30, r24
 19e:	20 83       	st	Z, r18

	// Überlaufzähler zurücksetzen
	OvCnt = 0;
 1a0:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 1a4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>

	// Timer0 initialisieren
	// Zählerstandsregister initialisieren
	TCNT0 = 0;
 1a8:	82 e5       	ldi	r24, 0x52	; 82
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	fc 01       	movw	r30, r24
 1ae:	10 82       	st	Z, r1
	// Vergleichsregister zurücksetzen
	OCR0  = 250;
 1b0:	8c e5       	ldi	r24, 0x5C	; 92
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	2a ef       	ldi	r18, 0xFA	; 250
 1b6:	fc 01       	movw	r30, r24
 1b8:	20 83       	st	Z, r18
	// Konfigurationsregister:
	// WGM01:0 = Normaler Betrieb
	// COM01:0 = Normaler Betrieb
	// CS02:0  = Vorteiler 64
	TCCR0 = (0<<WGM01) | (0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<CS02) | (1<<CS01) | (1<<CS00);
 1ba:	83 e5       	ldi	r24, 0x53	; 83
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	23 e0       	ldi	r18, 0x03	; 3
 1c0:	fc 01       	movw	r30, r24
 1c2:	20 83       	st	Z, r18

	// Interruptmaskenregister setzen:
	// TOIE0: INT auslösen bei Überlauf Timer0 aktiv
	// OCIE0: INT auslösen bei Vergleich Timer0 inaktiv
	TIMSK |= (0<<TOIE0) | (1<<OCIE0);
 1c4:	89 e5       	ldi	r24, 0x59	; 89
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	29 e5       	ldi	r18, 0x59	; 89
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	f9 01       	movw	r30, r18
 1ce:	20 81       	ld	r18, Z
 1d0:	22 60       	ori	r18, 0x02	; 2
 1d2:	fc 01       	movw	r30, r24
 1d4:	20 83       	st	Z, r18

	// Interrupts global freigeben
	sei();
 1d6:	78 94       	sei
	
	while(1){
		
	}
 1d8:	ff cf       	rjmp	.-2      	; 0x1d8 <A_3_2_2+0x54>

000001da <main>:
#include "Labor_3/MPT_LAB_3_3.h"
#include "Labor_3/MPT_LAB_3_4.h"


int main(void)
{	
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	cd b7       	in	r28, 0x3d	; 61
 1e0:	de b7       	in	r29, 0x3e	; 62
  //                Interrupt-Betrieb des Timers über ISR in verschiedenen Betriebsarten.
  // A_3_2_1: Blinken einer LED mit ISR auf Timer-Overflow.
  // A_3_2_2: Blinken einer LED mit ISR auf Timer-Compare.
  //------------------------------------------------------------------------------
  //A_3_2_1();
  A_3_2_2();
 1e2:	0e 94 c2 00 	call	0x184	; 0x184 <A_3_2_2>


  while(1)
  {
      //TODO:: Please write your application code 
  }
 1e6:	ff cf       	rjmp	.-2      	; 0x1e6 <main+0xc>

000001e8 <_exit>:
 1e8:	f8 94       	cli

000001ea <__stop_program>:
 1ea:	ff cf       	rjmp	.-2      	; 0x1ea <__stop_program>
