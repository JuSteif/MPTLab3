
MPT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cc6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ec  00800060  00000cc6  00000d5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080014c  0080014c  00000e46  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e46  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ac5  00000000  00000000  00000fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000729  00000000  00000000  00001a71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000098a  00000000  00000000  0000219a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000378  00000000  00000000  00002b24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a7  00000000  00000000  00002e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000702  00000000  00000000  00003343  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003a45  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_10>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ec       	ldi	r30, 0xC6	; 198
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 34       	cpi	r26, 0x4C	; 76
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	ac e4       	ldi	r26, 0x4C	; 76
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 35       	cpi	r26, 0x55	; 85
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ba 03 	call	0x774	; 0x774 <main>
  8a:	0c 94 61 06 	jmp	0xcc2	; 0xcc2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_11>:
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  9a:	0f 92       	push	r0
  9c:	11 24       	eor	r1, r1
  9e:	2f 93       	push	r18
  a0:	3f 93       	push	r19
  a2:	8f 93       	push	r24
  a4:	9f 93       	push	r25
  a6:	ef 93       	push	r30
  a8:	ff 93       	push	r31
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
  b2:	82 e5       	ldi	r24, 0x52	; 82
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	26 e0       	ldi	r18, 0x06	; 6
  b8:	fc 01       	movw	r30, r24
  ba:	20 83       	st	Z, r18
  bc:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <OvCnt>
  c0:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <OvCnt+0x1>
  c4:	01 96       	adiw	r24, 0x01	; 1
  c6:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <OvCnt+0x1>
  ca:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <OvCnt>
  ce:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <OvCnt>
  d2:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <OvCnt+0x1>
  d6:	80 3d       	cpi	r24, 0xD0	; 208
  d8:	97 40       	sbci	r25, 0x07	; 7
  da:	71 f4       	brne	.+28     	; 0xf8 <__vector_11+0x66>
  dc:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <OvCnt+0x1>
  e0:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <OvCnt>
  e4:	85 e3       	ldi	r24, 0x35	; 53
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	25 e3       	ldi	r18, 0x35	; 53
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	f9 01       	movw	r30, r18
  ee:	30 81       	ld	r19, Z
  f0:	21 e0       	ldi	r18, 0x01	; 1
  f2:	23 27       	eor	r18, r19
  f4:	fc 01       	movw	r30, r24
  f6:	20 83       	st	Z, r18
  f8:	00 00       	nop
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	ff 91       	pop	r31
 100:	ef 91       	pop	r30
 102:	9f 91       	pop	r25
 104:	8f 91       	pop	r24
 106:	3f 91       	pop	r19
 108:	2f 91       	pop	r18
 10a:	0f 90       	pop	r0
 10c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <__vector_10>:
//------------------------------------------------------------------------------
//  Interrupt Service Routinen
//------------------------------------------------------------------------------
//Routine um Millisekunden zu messen und den Miilisekundencounter zu inkrementieren
ISR(TIMER0_COMP_vect)
{
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
 126:	ef 93       	push	r30
 128:	ff 93       	push	r31
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
	milliSec++;
 132:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <milliSec>
 136:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <milliSec+0x1>
 13a:	01 96       	adiw	r24, 0x01	; 1
 13c:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <milliSec+0x1>
 140:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <milliSec>
	TCNT0 = 0;
 144:	82 e5       	ldi	r24, 0x52	; 82
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	fc 01       	movw	r30, r24
 14a:	10 82       	st	Z, r1
}
 14c:	00 00       	nop
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	ff 91       	pop	r31
 154:	ef 91       	pop	r30
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	0f 90       	pop	r0
 15c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 160:	0f 90       	pop	r0
 162:	1f 90       	pop	r1
 164:	18 95       	reti

00000166 <__vector_3>:

//(Zusätzlich) Routine zu Interupt basierten Verarbeitung
ISR(INT2_vect){
 166:	1f 92       	push	r1
 168:	0f 92       	push	r0
 16a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 16e:	0f 92       	push	r0
 170:	11 24       	eor	r1, r1
 172:	2f 93       	push	r18
 174:	3f 93       	push	r19
 176:	8f 93       	push	r24
 178:	9f 93       	push	r25
 17a:	ef 93       	push	r30
 17c:	ff 93       	push	r31
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	cd b7       	in	r28, 0x3d	; 61
 184:	de b7       	in	r29, 0x3e	; 62
	state = 3;
 186:	83 e0       	ldi	r24, 0x03	; 3
 188:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__data_end>
	GICR &= ~(1 << INT2);
 18c:	8b e5       	ldi	r24, 0x5B	; 91
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	2b e5       	ldi	r18, 0x5B	; 91
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	f9 01       	movw	r30, r18
 196:	20 81       	ld	r18, Z
 198:	2f 7d       	andi	r18, 0xDF	; 223
 19a:	fc 01       	movw	r30, r24
 19c:	20 83       	st	Z, r18
}
 19e:	00 00       	nop
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	ff 91       	pop	r31
 1a6:	ef 91       	pop	r30
 1a8:	9f 91       	pop	r25
 1aa:	8f 91       	pop	r24
 1ac:	3f 91       	pop	r19
 1ae:	2f 91       	pop	r18
 1b0:	0f 90       	pop	r0
 1b2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 1b6:	0f 90       	pop	r0
 1b8:	1f 90       	pop	r1
 1ba:	18 95       	reti

000001bc <__vector_13>:

//(Zusätzlich) Hilfe: Terminal hat Hilfe durch senden von 'h' angefordert
ISR(USART_RXC_vect){
 1bc:	1f 92       	push	r1
 1be:	0f 92       	push	r0
 1c0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 1c4:	0f 92       	push	r0
 1c6:	11 24       	eor	r1, r1
 1c8:	2f 93       	push	r18
 1ca:	3f 93       	push	r19
 1cc:	4f 93       	push	r20
 1ce:	5f 93       	push	r21
 1d0:	6f 93       	push	r22
 1d2:	7f 93       	push	r23
 1d4:	8f 93       	push	r24
 1d6:	9f 93       	push	r25
 1d8:	af 93       	push	r26
 1da:	bf 93       	push	r27
 1dc:	ef 93       	push	r30
 1de:	ff 93       	push	r31
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	cd b7       	in	r28, 0x3d	; 61
 1e6:	de b7       	in	r29, 0x3e	; 62
	if(UDR == 'h'){
 1e8:	8c e2       	ldi	r24, 0x2C	; 44
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	fc 01       	movw	r30, r24
 1ee:	80 81       	ld	r24, Z
 1f0:	88 36       	cpi	r24, 0x68	; 104
 1f2:	21 f4       	brne	.+8      	; 0x1fc <__vector_13+0x40>
		//Hilfestellungstext
		UsartPuts("Taster 7 ist Start\nTaster 6 ist Stopp(Normal)\nTaster 2 ist Stopp(Interupt verarbeitet mit INT2)\n");
 1f4:	86 e6       	ldi	r24, 0x66	; 102
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 d5 04 	call	0x9aa	; 0x9aa <UsartPuts>
	}
}
 1fc:	00 00       	nop
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	ff 91       	pop	r31
 204:	ef 91       	pop	r30
 206:	bf 91       	pop	r27
 208:	af 91       	pop	r26
 20a:	9f 91       	pop	r25
 20c:	8f 91       	pop	r24
 20e:	7f 91       	pop	r23
 210:	6f 91       	pop	r22
 212:	5f 91       	pop	r21
 214:	4f 91       	pop	r20
 216:	3f 91       	pop	r19
 218:	2f 91       	pop	r18
 21a:	0f 90       	pop	r0
 21c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 220:	0f 90       	pop	r0
 222:	1f 90       	pop	r1
 224:	18 95       	reti

00000226 <WaitTimer0_x_10ms>:

//------------------------------------------------------------------------------
//  Private Funktionen
//------------------------------------------------------------------------------
static void WaitTimer0_x_10ms(uint8_t x_10ms)
{
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	00 d0       	rcall	.+0      	; 0x22c <WaitTimer0_x_10ms+0x6>
 22c:	cd b7       	in	r28, 0x3d	; 61
 22e:	de b7       	in	r29, 0x3e	; 62
 230:	8a 83       	std	Y+2, r24	; 0x02
	// IHR_CODE_HIER ...
	//Initialisierung der Timer
	TCCR0 |= (1 << CS02) | (1 << CS00);
 232:	83 e5       	ldi	r24, 0x53	; 83
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	23 e5       	ldi	r18, 0x53	; 83
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	f9 01       	movw	r30, r18
 23c:	20 81       	ld	r18, Z
 23e:	25 60       	ori	r18, 0x05	; 5
 240:	fc 01       	movw	r30, r24
 242:	20 83       	st	Z, r18
	TCNT0 = 100;
 244:	82 e5       	ldi	r24, 0x52	; 82
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	24 e6       	ldi	r18, 0x64	; 100
 24a:	fc 01       	movw	r30, r24
 24c:	20 83       	st	Z, r18
	OCR0 = 0;
 24e:	8c e5       	ldi	r24, 0x5C	; 92
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	fc 01       	movw	r30, r24
 254:	10 82       	st	Z, r1
	TIMSK = 0;
 256:	89 e5       	ldi	r24, 0x59	; 89
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	fc 01       	movw	r30, r24
 25c:	10 82       	st	Z, r1
	
	//Wait Variable einfügen zum Vergleich mit der Variable x_10ms
	uint8_t waiter = 0;
 25e:	19 82       	std	Y+1, r1	; 0x01
	
	//Sofortiges beenden der Funktions, falls nicht gewartet werden soll
	if(x_10ms == 0){
 260:	8a 81       	ldd	r24, Y+2	; 0x02
 262:	88 23       	and	r24, r24
 264:	01 f1       	breq	.+64     	; 0x2a6 <WaitTimer0_x_10ms+0x80>
		return;
	}
	
	while(1){
		//Überprüfung des Overflow-Flags
		if(BIT_IS_SET(TIFR, TOV0)){
 266:	88 e5       	ldi	r24, 0x58	; 88
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	fc 01       	movw	r30, r24
 26c:	80 81       	ld	r24, Z
 26e:	88 2f       	mov	r24, r24
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	81 70       	andi	r24, 0x01	; 1
 274:	99 27       	eor	r25, r25
 276:	89 2b       	or	r24, r25
 278:	b1 f3       	breq	.-20     	; 0x266 <WaitTimer0_x_10ms+0x40>
			//Rücksetzen des Overflow-Flags
			SET_BIT(TIFR, TOV0);
 27a:	88 e5       	ldi	r24, 0x58	; 88
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	28 e5       	ldi	r18, 0x58	; 88
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	f9 01       	movw	r30, r18
 284:	20 81       	ld	r18, Z
 286:	21 60       	ori	r18, 0x01	; 1
 288:	fc 01       	movw	r30, r24
 28a:	20 83       	st	Z, r18
			//Wait Variable inkrementieren, zählt in 10ms-Schritten
			waiter++;
 28c:	89 81       	ldd	r24, Y+1	; 0x01
 28e:	8f 5f       	subi	r24, 0xFF	; 255
 290:	89 83       	std	Y+1, r24	; 0x01
			//TCNT0 auf Startwert setzen
			TCNT0 = 100;
 292:	82 e5       	ldi	r24, 0x52	; 82
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	24 e6       	ldi	r18, 0x64	; 100
 298:	fc 01       	movw	r30, r24
 29a:	20 83       	st	Z, r18
			
			//Abbruchbedingung, wenn wait gleich der x_10ms ist ist die Wartezeit vorbei
			if(waiter >= x_10ms){
 29c:	99 81       	ldd	r25, Y+1	; 0x01
 29e:	8a 81       	ldd	r24, Y+2	; 0x02
 2a0:	98 17       	cp	r25, r24
 2a2:	18 f4       	brcc	.+6      	; 0x2aa <WaitTimer0_x_10ms+0x84>
				return;
			}
		}
	}
 2a4:	e0 cf       	rjmp	.-64     	; 0x266 <WaitTimer0_x_10ms+0x40>
	//Wait Variable einfügen zum Vergleich mit der Variable x_10ms
	uint8_t waiter = 0;
	
	//Sofortiges beenden der Funktions, falls nicht gewartet werden soll
	if(x_10ms == 0){
		return;
 2a6:	00 00       	nop
 2a8:	01 c0       	rjmp	.+2      	; 0x2ac <WaitTimer0_x_10ms+0x86>
			//TCNT0 auf Startwert setzen
			TCNT0 = 100;
			
			//Abbruchbedingung, wenn wait gleich der x_10ms ist ist die Wartezeit vorbei
			if(waiter >= x_10ms){
				return;
 2aa:	00 00       	nop
			}
		}
	}
}
 2ac:	0f 90       	pop	r0
 2ae:	0f 90       	pop	r0
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	08 95       	ret

000002b6 <potenz>:

//Funktion zum potenzieren
int potenz(int basis, int exponent){
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	cd b7       	in	r28, 0x3d	; 61
 2bc:	de b7       	in	r29, 0x3e	; 62
 2be:	28 97       	sbiw	r28, 0x08	; 8
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	f8 94       	cli
 2c4:	de bf       	out	0x3e, r29	; 62
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	cd bf       	out	0x3d, r28	; 61
 2ca:	9e 83       	std	Y+6, r25	; 0x06
 2cc:	8d 83       	std	Y+5, r24	; 0x05
 2ce:	78 87       	std	Y+8, r23	; 0x08
 2d0:	6f 83       	std	Y+7, r22	; 0x07
	int result = 1;
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	9a 83       	std	Y+2, r25	; 0x02
 2d8:	89 83       	std	Y+1, r24	; 0x01
	for(int i = 0; i < exponent; i++){
 2da:	1c 82       	std	Y+4, r1	; 0x04
 2dc:	1b 82       	std	Y+3, r1	; 0x03
 2de:	12 c0       	rjmp	.+36     	; 0x304 <potenz+0x4e>
		result *= basis;
 2e0:	49 81       	ldd	r20, Y+1	; 0x01
 2e2:	5a 81       	ldd	r21, Y+2	; 0x02
 2e4:	2d 81       	ldd	r18, Y+5	; 0x05
 2e6:	3e 81       	ldd	r19, Y+6	; 0x06
 2e8:	42 9f       	mul	r20, r18
 2ea:	c0 01       	movw	r24, r0
 2ec:	43 9f       	mul	r20, r19
 2ee:	90 0d       	add	r25, r0
 2f0:	52 9f       	mul	r21, r18
 2f2:	90 0d       	add	r25, r0
 2f4:	11 24       	eor	r1, r1
 2f6:	9a 83       	std	Y+2, r25	; 0x02
 2f8:	89 83       	std	Y+1, r24	; 0x01
}

//Funktion zum potenzieren
int potenz(int basis, int exponent){
	int result = 1;
	for(int i = 0; i < exponent; i++){
 2fa:	8b 81       	ldd	r24, Y+3	; 0x03
 2fc:	9c 81       	ldd	r25, Y+4	; 0x04
 2fe:	01 96       	adiw	r24, 0x01	; 1
 300:	9c 83       	std	Y+4, r25	; 0x04
 302:	8b 83       	std	Y+3, r24	; 0x03
 304:	2b 81       	ldd	r18, Y+3	; 0x03
 306:	3c 81       	ldd	r19, Y+4	; 0x04
 308:	8f 81       	ldd	r24, Y+7	; 0x07
 30a:	98 85       	ldd	r25, Y+8	; 0x08
 30c:	28 17       	cp	r18, r24
 30e:	39 07       	cpc	r19, r25
 310:	3c f3       	brlt	.-50     	; 0x2e0 <potenz+0x2a>
		result *= basis;
	}
	return result;
 312:	89 81       	ldd	r24, Y+1	; 0x01
 314:	9a 81       	ldd	r25, Y+2	; 0x02
}
 316:	28 96       	adiw	r28, 0x08	; 8
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	f8 94       	cli
 31c:	de bf       	out	0x3e, r29	; 62
 31e:	0f be       	out	0x3f, r0	; 63
 320:	cd bf       	out	0x3d, r28	; 61
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	08 95       	ret

00000328 <uint16ToString>:

char* uint16ToString(uint16_t number){
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
 32c:	cd b7       	in	r28, 0x3d	; 61
 32e:	de b7       	in	r29, 0x3e	; 62
 330:	2a 97       	sbiw	r28, 0x0a	; 10
 332:	0f b6       	in	r0, 0x3f	; 63
 334:	f8 94       	cli
 336:	de bf       	out	0x3e, r29	; 62
 338:	0f be       	out	0x3f, r0	; 63
 33a:	cd bf       	out	0x3d, r28	; 61
 33c:	9a 87       	std	Y+10, r25	; 0x0a
 33e:	89 87       	std	Y+9, r24	; 0x09
	//Anzahl an Ziffern feststellen
	uint16_t num = number;
 340:	89 85       	ldd	r24, Y+9	; 0x09
 342:	9a 85       	ldd	r25, Y+10	; 0x0a
 344:	9a 83       	std	Y+2, r25	; 0x02
 346:	89 83       	std	Y+1, r24	; 0x01
	uint8_t len = 0;
 348:	1b 82       	std	Y+3, r1	; 0x03
	while(num >= 1){
 34a:	14 c0       	rjmp	.+40     	; 0x374 <uint16ToString+0x4c>
		num = number / potenz(10, len);
 34c:	8b 81       	ldd	r24, Y+3	; 0x03
 34e:	88 2f       	mov	r24, r24
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	bc 01       	movw	r22, r24
 354:	8a e0       	ldi	r24, 0x0A	; 10
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <potenz>
 35c:	9c 01       	movw	r18, r24
 35e:	89 85       	ldd	r24, Y+9	; 0x09
 360:	9a 85       	ldd	r25, Y+10	; 0x0a
 362:	b9 01       	movw	r22, r18
 364:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__udivmodhi4>
 368:	cb 01       	movw	r24, r22
 36a:	9a 83       	std	Y+2, r25	; 0x02
 36c:	89 83       	std	Y+1, r24	; 0x01
		len++;
 36e:	8b 81       	ldd	r24, Y+3	; 0x03
 370:	8f 5f       	subi	r24, 0xFF	; 255
 372:	8b 83       	std	Y+3, r24	; 0x03

char* uint16ToString(uint16_t number){
	//Anzahl an Ziffern feststellen
	uint16_t num = number;
	uint8_t len = 0;
	while(num >= 1){
 374:	89 81       	ldd	r24, Y+1	; 0x01
 376:	9a 81       	ldd	r25, Y+2	; 0x02
 378:	89 2b       	or	r24, r25
 37a:	41 f7       	brne	.-48     	; 0x34c <uint16ToString+0x24>
		len++;
	}
	
	//Setzen der min Laenge auf 5, da Zeit in Sek angegeben werden soll.
	//Komma, 3 Nachkommastellen und Einer
	if(len < 4){
 37c:	8b 81       	ldd	r24, Y+3	; 0x03
 37e:	84 30       	cpi	r24, 0x04	; 4
 380:	10 f4       	brcc	.+4      	; 0x386 <uint16ToString+0x5e>
		len = 4;
 382:	84 e0       	ldi	r24, 0x04	; 4
 384:	8b 83       	std	Y+3, r24	; 0x03
	}
	len += 2;
 386:	8b 81       	ldd	r24, Y+3	; 0x03
 388:	8e 5f       	subi	r24, 0xFE	; 254
 38a:	8b 83       	std	Y+3, r24	; 0x03
	
	//String anlegen, mit vorreserviertem Speicher
	char* result;
	result = malloc(sizeof(char) * len);
 38c:	8b 81       	ldd	r24, Y+3	; 0x03
 38e:	88 2f       	mov	r24, r24
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 40 05 	call	0xa80	; 0xa80 <malloc>
 396:	9e 83       	std	Y+6, r25	; 0x06
 398:	8d 83       	std	Y+5, r24	; 0x05
	result[len - 1] = '\0';
 39a:	8b 81       	ldd	r24, Y+3	; 0x03
 39c:	88 2f       	mov	r24, r24
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	01 97       	sbiw	r24, 0x01	; 1
 3a2:	2d 81       	ldd	r18, Y+5	; 0x05
 3a4:	3e 81       	ldd	r19, Y+6	; 0x06
 3a6:	82 0f       	add	r24, r18
 3a8:	93 1f       	adc	r25, r19
 3aa:	fc 01       	movw	r30, r24
 3ac:	10 82       	st	Z, r1
	
	for(int8_t i = len - 2; i >= 0; i--){
 3ae:	8b 81       	ldd	r24, Y+3	; 0x03
 3b0:	82 50       	subi	r24, 0x02	; 2
 3b2:	8c 83       	std	Y+4, r24	; 0x04
 3b4:	52 c0       	rjmp	.+164    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
		//If Abfrage, um Komma an richtige Position zu setzen
		if(i == len - 5){
 3b6:	8c 81       	ldd	r24, Y+4	; 0x04
 3b8:	28 2f       	mov	r18, r24
 3ba:	88 0f       	add	r24, r24
 3bc:	33 0b       	sbc	r19, r19
 3be:	8b 81       	ldd	r24, Y+3	; 0x03
 3c0:	88 2f       	mov	r24, r24
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	05 97       	sbiw	r24, 0x05	; 5
 3c6:	28 17       	cp	r18, r24
 3c8:	39 07       	cpc	r19, r25
 3ca:	71 f4       	brne	.+28     	; 0x3e8 <uint16ToString+0xc0>
			char zeichen = ',';
 3cc:	8c e2       	ldi	r24, 0x2C	; 44
 3ce:	8f 83       	std	Y+7, r24	; 0x07
			result[i] = zeichen;
 3d0:	8c 81       	ldd	r24, Y+4	; 0x04
 3d2:	08 2e       	mov	r0, r24
 3d4:	00 0c       	add	r0, r0
 3d6:	99 0b       	sbc	r25, r25
 3d8:	2d 81       	ldd	r18, Y+5	; 0x05
 3da:	3e 81       	ldd	r19, Y+6	; 0x06
 3dc:	82 0f       	add	r24, r18
 3de:	93 1f       	adc	r25, r19
 3e0:	2f 81       	ldd	r18, Y+7	; 0x07
 3e2:	fc 01       	movw	r30, r24
 3e4:	20 83       	st	Z, r18
			continue;
 3e6:	36 c0       	rjmp	.+108    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		}
		//Letzte Ziffer in entsprechendes ASCII-Zeichen umwandeln
		char zeichen = (number % 10) + '0';
 3e8:	49 85       	ldd	r20, Y+9	; 0x09
 3ea:	5a 85       	ldd	r21, Y+10	; 0x0a
 3ec:	9a 01       	movw	r18, r20
 3ee:	ad ec       	ldi	r26, 0xCD	; 205
 3f0:	bc ec       	ldi	r27, 0xCC	; 204
 3f2:	0e 94 31 05 	call	0xa62	; 0xa62 <__umulhisi3>
 3f6:	96 95       	lsr	r25
 3f8:	87 95       	ror	r24
 3fa:	96 95       	lsr	r25
 3fc:	87 95       	ror	r24
 3fe:	96 95       	lsr	r25
 400:	87 95       	ror	r24
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	9c 01       	movw	r18, r24
 408:	22 0f       	add	r18, r18
 40a:	33 1f       	adc	r19, r19
 40c:	22 0f       	add	r18, r18
 40e:	33 1f       	adc	r19, r19
 410:	82 0f       	add	r24, r18
 412:	93 1f       	adc	r25, r19
 414:	9a 01       	movw	r18, r20
 416:	28 1b       	sub	r18, r24
 418:	39 0b       	sbc	r19, r25
 41a:	c9 01       	movw	r24, r18
 41c:	80 5d       	subi	r24, 0xD0	; 208
 41e:	88 87       	std	Y+8, r24	; 0x08
		result[i] = zeichen;
 420:	8c 81       	ldd	r24, Y+4	; 0x04
 422:	08 2e       	mov	r0, r24
 424:	00 0c       	add	r0, r0
 426:	99 0b       	sbc	r25, r25
 428:	2d 81       	ldd	r18, Y+5	; 0x05
 42a:	3e 81       	ldd	r19, Y+6	; 0x06
 42c:	82 0f       	add	r24, r18
 42e:	93 1f       	adc	r25, r19
 430:	28 85       	ldd	r18, Y+8	; 0x08
 432:	fc 01       	movw	r30, r24
 434:	20 83       	st	Z, r18
		//number neu berechnen, sodass die nächste Ziffer im folgenden Schleifendurchlauf abgespeichert werden kann
		number = number / 10;
 436:	89 85       	ldd	r24, Y+9	; 0x09
 438:	9a 85       	ldd	r25, Y+10	; 0x0a
 43a:	9c 01       	movw	r18, r24
 43c:	ad ec       	ldi	r26, 0xCD	; 205
 43e:	bc ec       	ldi	r27, 0xCC	; 204
 440:	0e 94 31 05 	call	0xa62	; 0xa62 <__umulhisi3>
 444:	96 95       	lsr	r25
 446:	87 95       	ror	r24
 448:	96 95       	lsr	r25
 44a:	87 95       	ror	r24
 44c:	96 95       	lsr	r25
 44e:	87 95       	ror	r24
 450:	9a 87       	std	Y+10, r25	; 0x0a
 452:	89 87       	std	Y+9, r24	; 0x09
	//String anlegen, mit vorreserviertem Speicher
	char* result;
	result = malloc(sizeof(char) * len);
	result[len - 1] = '\0';
	
	for(int8_t i = len - 2; i >= 0; i--){
 454:	8c 81       	ldd	r24, Y+4	; 0x04
 456:	81 50       	subi	r24, 0x01	; 1
 458:	8c 83       	std	Y+4, r24	; 0x04
 45a:	8c 81       	ldd	r24, Y+4	; 0x04
 45c:	88 23       	and	r24, r24
 45e:	0c f0       	brlt	.+2      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 460:	aa cf       	rjmp	.-172    	; 0x3b6 <uint16ToString+0x8e>
		//number neu berechnen, sodass die nächste Ziffer im folgenden Schleifendurchlauf abgespeichert werden kann
		number = number / 10;
	}
	
	//String zurück geben
	return result;
 462:	8d 81       	ldd	r24, Y+5	; 0x05
 464:	9e 81       	ldd	r25, Y+6	; 0x06
}
 466:	2a 96       	adiw	r28, 0x0a	; 10
 468:	0f b6       	in	r0, 0x3f	; 63
 46a:	f8 94       	cli
 46c:	de bf       	out	0x3e, r29	; 62
 46e:	0f be       	out	0x3f, r0	; 63
 470:	cd bf       	out	0x3d, r28	; 61
 472:	df 91       	pop	r29
 474:	cf 91       	pop	r28
 476:	08 95       	ret

00000478 <A_3_4_1>:

//##############################################################################

// A_3_4_1: Reaktionstester mit Zeitmessung über Timer0 und Terminalausgabe
void A_3_4_1(void)
{
 478:	0f 93       	push	r16
 47a:	1f 93       	push	r17
 47c:	cf 93       	push	r28
 47e:	df 93       	push	r29
 480:	00 d0       	rcall	.+0      	; 0x482 <A_3_4_1+0xa>
 482:	00 d0       	rcall	.+0      	; 0x484 <A_3_4_1+0xc>
 484:	cd b7       	in	r28, 0x3d	; 61
 486:	de b7       	in	r29, 0x3e	; 62
	// IHR_CODE_HIER ...
	
	//Taster und LED´s initialisieren
	TASTER_DDR = 0x00;
 488:	87 e3       	ldi	r24, 0x37	; 55
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	fc 01       	movw	r30, r24
 48e:	10 82       	st	Z, r1
	LED_DDR = 0xff;
 490:	84 e3       	ldi	r24, 0x34	; 52
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	2f ef       	ldi	r18, 0xFF	; 255
 496:	fc 01       	movw	r30, r24
 498:	20 83       	st	Z, r18
	LED_PORT = 0xff;
 49a:	85 e3       	ldi	r24, 0x35	; 53
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	2f ef       	ldi	r18, 0xFF	; 255
 4a0:	fc 01       	movw	r30, r24
 4a2:	20 83       	st	Z, r18
	
	//USART-Schnittstelle initialisieren und Interupt für empfangene Daten aktivieren
	UsartInit(8,0,1,9600);
 4a4:	00 e8       	ldi	r16, 0x80	; 128
 4a6:	15 e2       	ldi	r17, 0x25	; 37
 4a8:	20 e0       	ldi	r18, 0x00	; 0
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	41 e0       	ldi	r20, 0x01	; 1
 4ae:	60 e0       	ldi	r22, 0x00	; 0
 4b0:	88 e0       	ldi	r24, 0x08	; 8
 4b2:	0e 94 c1 03 	call	0x782	; 0x782 <UsartInit>
	SET_BIT(UCSRB, 7);
 4b6:	8a e2       	ldi	r24, 0x2A	; 42
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	2a e2       	ldi	r18, 0x2A	; 42
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	f9 01       	movw	r30, r18
 4c0:	20 81       	ld	r18, Z
 4c2:	20 68       	ori	r18, 0x80	; 128
 4c4:	fc 01       	movw	r30, r24
 4c6:	20 83       	st	Z, r18
	
	//Timer initialisiern und zugehörige Interupts.(Zur Bestimmung einer zufälligen Wartezeit)
	TCCR0 = (0<<WGM01) | (0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<CS02) | (0<<CS01) | (1<<CS00);
 4c8:	83 e5       	ldi	r24, 0x53	; 83
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	21 e0       	ldi	r18, 0x01	; 1
 4ce:	fc 01       	movw	r30, r24
 4d0:	20 83       	st	Z, r18
	TIMSK |= (0<<TOIE0) | (0<<OCIE0);
 4d2:	89 e5       	ldi	r24, 0x59	; 89
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	29 e5       	ldi	r18, 0x59	; 89
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	f9 01       	movw	r30, r18
 4dc:	20 81       	ld	r18, Z
 4de:	fc 01       	movw	r30, r24
 4e0:	20 83       	st	Z, r18
	OCR0 = 0;
 4e2:	8c e5       	ldi	r24, 0x5C	; 92
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	fc 01       	movw	r30, r24
 4e8:	10 82       	st	Z, r1
	TCNT0 = 0;
 4ea:	82 e5       	ldi	r24, 0x52	; 82
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	fc 01       	movw	r30, r24
 4f0:	10 82       	st	Z, r1
	
	// Speichervariable für zufällige Speicherzeit
	uint8_t waitTime = 1;
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	89 83       	std	Y+1, r24	; 0x01
	// Speichervariable für zufällige LED
	uint8_t led = 0;
 4f6:	1a 82       	std	Y+2, r1	; 0x02
	// String für die konvertierte Reaktionszeit
	char* reactionTime;
	
	// Interupts aktivieren
	sei();
 4f8:	78 94       	sei
	
	// Startaufforderung an Terminal senden
	UsartPuts("Start drücken:\n");
 4fa:	87 ec       	ldi	r24, 0xC7	; 199
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	0e 94 d5 04 	call	0x9aa	; 0x9aa <UsartPuts>
 	
	while(1){
		// switch für Statemaschine
		switch(state){
 502:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
 506:	88 2f       	mov	r24, r24
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	81 30       	cpi	r24, 0x01	; 1
 50c:	91 05       	cpc	r25, r1
 50e:	09 f4       	brne	.+2      	; 0x512 <A_3_4_1+0x9a>
 510:	42 c0       	rjmp	.+132    	; 0x596 <A_3_4_1+0x11e>
 512:	82 30       	cpi	r24, 0x02	; 2
 514:	91 05       	cpc	r25, r1
 516:	1c f4       	brge	.+6      	; 0x51e <A_3_4_1+0xa6>
 518:	89 2b       	or	r24, r25
 51a:	49 f0       	breq	.+18     	; 0x52e <A_3_4_1+0xb6>
 51c:	20 c1       	rjmp	.+576    	; 0x75e <A_3_4_1+0x2e6>
 51e:	82 30       	cpi	r24, 0x02	; 2
 520:	91 05       	cpc	r25, r1
 522:	09 f4       	brne	.+2      	; 0x526 <A_3_4_1+0xae>
 524:	b2 c0       	rjmp	.+356    	; 0x68a <A_3_4_1+0x212>
 526:	03 97       	sbiw	r24, 0x03	; 3
 528:	09 f4       	brne	.+2      	; 0x52c <A_3_4_1+0xb4>
 52a:	be c0       	rjmp	.+380    	; 0x6a8 <A_3_4_1+0x230>
 52c:	18 c1       	rjmp	.+560    	; 0x75e <A_3_4_1+0x2e6>
			//Case 0: Bildet den Start des Reaktionsspiels. Bevor Startknopf gedrückt wurde
			case 0:
				//Abfrage ob Spiel gestartet werden soll
				if(BIT_IS_SET(TASTER_PIN, TASTER_START)){
 52e:	86 e3       	ldi	r24, 0x36	; 54
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	fc 01       	movw	r30, r24
 534:	80 81       	ld	r24, Z
 536:	88 23       	and	r24, r24
 538:	0c f0       	brlt	.+2      	; 0x53c <A_3_4_1+0xc4>
 53a:	18 c1       	rjmp	.+560    	; 0x76c <A_3_4_1+0x2f4>
					UsartPuts("State 0");
 53c:	87 ed       	ldi	r24, 0xD7	; 215
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	0e 94 d5 04 	call	0x9aa	; 0x9aa <UsartPuts>
					// Neuen Status setzen(Start angefordert)
					state = 1;
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__data_end>
					// Zufaellige Wartezeit- und LED-wahl
					// Pseudozufall, da nicht vorhersehbar und kann nur schwer von menchlichem Spieler beeinflusst werden.
					// An zufälligem Zeitpunkt wird Timerregister ausgelesen
					waitTime = TCNT0 % 10 + 1;
 54a:	82 e5       	ldi	r24, 0x52	; 82
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	fc 01       	movw	r30, r24
 550:	90 81       	ld	r25, Z
 552:	8d ec       	ldi	r24, 0xCD	; 205
 554:	98 9f       	mul	r25, r24
 556:	81 2d       	mov	r24, r1
 558:	11 24       	eor	r1, r1
 55a:	86 95       	lsr	r24
 55c:	86 95       	lsr	r24
 55e:	86 95       	lsr	r24
 560:	88 0f       	add	r24, r24
 562:	28 2f       	mov	r18, r24
 564:	22 0f       	add	r18, r18
 566:	22 0f       	add	r18, r18
 568:	82 0f       	add	r24, r18
 56a:	f9 2f       	mov	r31, r25
 56c:	f8 1b       	sub	r31, r24
 56e:	8f 2f       	mov	r24, r31
 570:	8f 5f       	subi	r24, 0xFF	; 255
 572:	89 83       	std	Y+1, r24	; 0x01
					led = TCNT0 % 8;
 574:	82 e5       	ldi	r24, 0x52	; 82
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	fc 01       	movw	r30, r24
 57a:	80 81       	ld	r24, Z
 57c:	87 70       	andi	r24, 0x07	; 7
 57e:	8a 83       	std	Y+2, r24	; 0x02
					//Entprellen der Taste
					WaitTimer0_x_10ms(5 * WAIT_EN);
 580:	85 e0       	ldi	r24, 0x05	; 5
 582:	0e 94 13 01 	call	0x226	; 0x226 <WaitTimer0_x_10ms>
					
					//Warten, bis Starttaste wieder losgelassen wurde
					while (BIT_IS_SET(TASTER_PIN, TASTER_START))
 586:	00 00       	nop
 588:	86 e3       	ldi	r24, 0x36	; 54
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	fc 01       	movw	r30, r24
 58e:	80 81       	ld	r24, Z
 590:	88 23       	and	r24, r24
 592:	d4 f3       	brlt	.-12     	; 0x588 <A_3_4_1+0x110>
					{
					}
				}
				break;
 594:	eb c0       	rjmp	.+470    	; 0x76c <A_3_4_1+0x2f4>
			// Case 1: Start angefordert nachdem Start gedrückt wurde
 			case 1:
					UsartPuts("State 1");
 596:	8f ed       	ldi	r24, 0xDF	; 223
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	0e 94 d5 04 	call	0x9aa	; 0x9aa <UsartPuts>
					// zufällige Zeit warten
					WaitTimer0_x_10ms(waitTime * TIME_FAKTOR * WAIT_EN);
 59e:	99 81       	ldd	r25, Y+1	; 0x01
 5a0:	84 e6       	ldi	r24, 0x64	; 100
 5a2:	98 9f       	mul	r25, r24
 5a4:	80 2d       	mov	r24, r0
 5a6:	11 24       	eor	r1, r1
 5a8:	0e 94 13 01 	call	0x226	; 0x226 <WaitTimer0_x_10ms>
					// Beschiss vermeiden, falls jemand schon den Stoptaster drückt bevor Lampe leuchtet
					if(BIT_IS_SET(TASTER_PIN, 6) || BIT_IS_SET(TASTER_PIN, 2)){
 5ac:	86 e3       	ldi	r24, 0x36	; 54
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	fc 01       	movw	r30, r24
 5b2:	80 81       	ld	r24, Z
 5b4:	88 2f       	mov	r24, r24
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	80 74       	andi	r24, 0x40	; 64
 5ba:	99 27       	eor	r25, r25
 5bc:	89 2b       	or	r24, r25
 5be:	51 f4       	brne	.+20     	; 0x5d4 <A_3_4_1+0x15c>
 5c0:	86 e3       	ldi	r24, 0x36	; 54
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	fc 01       	movw	r30, r24
 5c6:	80 81       	ld	r24, Z
 5c8:	88 2f       	mov	r24, r24
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	84 70       	andi	r24, 0x04	; 4
 5ce:	99 27       	eor	r25, r25
 5d0:	89 2b       	or	r24, r25
 5d2:	41 f0       	breq	.+16     	; 0x5e4 <A_3_4_1+0x16c>
						UsartPuts("Nimm die Botten weg und Bescheis nicht!");
 5d4:	87 ee       	ldi	r24, 0xE7	; 231
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	0e 94 d5 04 	call	0x9aa	; 0x9aa <UsartPuts>
						state = 3;
 5dc:	83 e0       	ldi	r24, 0x03	; 3
 5de:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__data_end>
						break;
 5e2:	c7 c0       	rjmp	.+398    	; 0x772 <A_3_4_1+0x2fa>
						while(BIT_IS_SET(TASTER_PIN, 6) || BIT_IS_SET(TASTER_PIN, 2)) {
						}
					}
					
					//Timer neu initialisieren, da jetzt in 1ms Schritten gezählt wird, und nicht in 10ms.
					TCCR0 |= (1 << CS01) | (1 << CS00);
 5e4:	83 e5       	ldi	r24, 0x53	; 83
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	23 e5       	ldi	r18, 0x53	; 83
 5ea:	30 e0       	ldi	r19, 0x00	; 0
 5ec:	f9 01       	movw	r30, r18
 5ee:	20 81       	ld	r18, Z
 5f0:	23 60       	ori	r18, 0x03	; 3
 5f2:	fc 01       	movw	r30, r24
 5f4:	20 83       	st	Z, r18
					TCCR0 &= ~(1 << CS02);
 5f6:	83 e5       	ldi	r24, 0x53	; 83
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	23 e5       	ldi	r18, 0x53	; 83
 5fc:	30 e0       	ldi	r19, 0x00	; 0
 5fe:	f9 01       	movw	r30, r18
 600:	20 81       	ld	r18, Z
 602:	2b 7f       	andi	r18, 0xFB	; 251
 604:	fc 01       	movw	r30, r24
 606:	20 83       	st	Z, r18
					TIMSK |= (0<<TOIE0) | (1<<OCIE0);
 608:	89 e5       	ldi	r24, 0x59	; 89
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	29 e5       	ldi	r18, 0x59	; 89
 60e:	30 e0       	ldi	r19, 0x00	; 0
 610:	f9 01       	movw	r30, r18
 612:	20 81       	ld	r18, Z
 614:	22 60       	ori	r18, 0x02	; 2
 616:	fc 01       	movw	r30, r24
 618:	20 83       	st	Z, r18
					OCR0 = 249;
 61a:	8c e5       	ldi	r24, 0x5C	; 92
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	29 ef       	ldi	r18, 0xF9	; 249
 620:	fc 01       	movw	r30, r24
 622:	20 83       	st	Z, r18
					milliSec = 0;
 624:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <milliSec+0x1>
 628:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <milliSec>
					TCNT0 = 0;
 62c:	82 e5       	ldi	r24, 0x52	; 82
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	fc 01       	movw	r30, r24
 632:	10 82       	st	Z, r1
					// Neuen State bestimmen(Auf Stop warten)
					state = 2;
 634:	82 e0       	ldi	r24, 0x02	; 2
 636:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__data_end>
					// LED aktivieren
					CLR_BIT(LED_PORT, led);
 63a:	85 e3       	ldi	r24, 0x35	; 53
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	25 e3       	ldi	r18, 0x35	; 53
 640:	30 e0       	ldi	r19, 0x00	; 0
 642:	f9 01       	movw	r30, r18
 644:	20 81       	ld	r18, Z
 646:	62 2f       	mov	r22, r18
 648:	2a 81       	ldd	r18, Y+2	; 0x02
 64a:	42 2f       	mov	r20, r18
 64c:	50 e0       	ldi	r21, 0x00	; 0
 64e:	21 e0       	ldi	r18, 0x01	; 1
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	02 c0       	rjmp	.+4      	; 0x658 <A_3_4_1+0x1e0>
 654:	22 0f       	add	r18, r18
 656:	33 1f       	adc	r19, r19
 658:	4a 95       	dec	r20
 65a:	e2 f7       	brpl	.-8      	; 0x654 <A_3_4_1+0x1dc>
 65c:	20 95       	com	r18
 65e:	26 23       	and	r18, r22
 660:	fc 01       	movw	r30, r24
 662:	20 83       	st	Z, r18
					
					//(Zusaetzlich) Externen Interupt auf PB2 aktivieren(aufsteigende Flanke) 
					GICR |= (1 << INT2);
 664:	8b e5       	ldi	r24, 0x5B	; 91
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	2b e5       	ldi	r18, 0x5B	; 91
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	f9 01       	movw	r30, r18
 66e:	20 81       	ld	r18, Z
 670:	20 62       	ori	r18, 0x20	; 32
 672:	fc 01       	movw	r30, r24
 674:	20 83       	st	Z, r18
					MCUCSR |= (1 << ISC2);
 676:	84 e5       	ldi	r24, 0x54	; 84
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	24 e5       	ldi	r18, 0x54	; 84
 67c:	30 e0       	ldi	r19, 0x00	; 0
 67e:	f9 01       	movw	r30, r18
 680:	20 81       	ld	r18, Z
 682:	20 64       	ori	r18, 0x40	; 64
 684:	fc 01       	movw	r30, r24
 686:	20 83       	st	Z, r18
				break;
 688:	74 c0       	rjmp	.+232    	; 0x772 <A_3_4_1+0x2fa>
			//Case 2: Auf Stop warten, bis der Nutzer die 6. Taste drückt oder die 2.
			case 2:
				// UsartPuts("State 2");
				// Kontinuierliche Abfrage des 6. Tasters(Alternativ Taster 2 drücken, basiert auf Interuptverarbeitung, ansonsten gleiches Prinzip)
				if(BIT_IS_SET(TASTER_PIN, 6)){
 68a:	86 e3       	ldi	r24, 0x36	; 54
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	fc 01       	movw	r30, r24
 690:	80 81       	ld	r24, Z
 692:	88 2f       	mov	r24, r24
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	80 74       	andi	r24, 0x40	; 64
 698:	99 27       	eor	r25, r25
 69a:	89 2b       	or	r24, r25
 69c:	09 f4       	brne	.+2      	; 0x6a0 <A_3_4_1+0x228>
 69e:	68 c0       	rjmp	.+208    	; 0x770 <A_3_4_1+0x2f8>
					// state auf 3 setzen(Auswertung)
					state = 3;
 6a0:	83 e0       	ldi	r24, 0x03	; 3
 6a2:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__data_end>
				}
				break;
 6a6:	64 c0       	rjmp	.+200    	; 0x770 <A_3_4_1+0x2f8>
			// Case 3: Auswertung des Spiels, letzter Status
			case 3:
				UsartPuts("State 3");
 6a8:	8f e0       	ldi	r24, 0x0F	; 15
 6aa:	91 e0       	ldi	r25, 0x01	; 1
 6ac:	0e 94 d5 04 	call	0x9aa	; 0x9aa <UsartPuts>
				// Interupt für Timer deaktivieren
				TIMSK &= ~(1 << OCIE0);
 6b0:	89 e5       	ldi	r24, 0x59	; 89
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	29 e5       	ldi	r18, 0x59	; 89
 6b6:	30 e0       	ldi	r19, 0x00	; 0
 6b8:	f9 01       	movw	r30, r18
 6ba:	20 81       	ld	r18, Z
 6bc:	2d 7f       	andi	r18, 0xFD	; 253
 6be:	fc 01       	movw	r30, r24
 6c0:	20 83       	st	Z, r18
				// Reaktionszeit von uint16_t in String konvertieren
				reactionTime = uint16ToString(milliSec);
 6c2:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <milliSec>
 6c6:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <milliSec+0x1>
 6ca:	0e 94 94 01 	call	0x328	; 0x328 <uint16ToString>
 6ce:	9c 83       	std	Y+4, r25	; 0x04
 6d0:	8b 83       	std	Y+3, r24	; 0x03
				// Reaktionszeit an Terminal senden
				UsartPuts("Deine Reaktionszeit sind ");
 6d2:	87 e1       	ldi	r24, 0x17	; 23
 6d4:	91 e0       	ldi	r25, 0x01	; 1
 6d6:	0e 94 d5 04 	call	0x9aa	; 0x9aa <UsartPuts>
				UsartPuts(reactionTime);
 6da:	8b 81       	ldd	r24, Y+3	; 0x03
 6dc:	9c 81       	ldd	r25, Y+4	; 0x04
 6de:	0e 94 d5 04 	call	0x9aa	; 0x9aa <UsartPuts>
				UsartPuts("sek.\n");
 6e2:	81 e3       	ldi	r24, 0x31	; 49
 6e4:	91 e0       	ldi	r25, 0x01	; 1
 6e6:	0e 94 d5 04 	call	0x9aa	; 0x9aa <UsartPuts>
				// Folgestatus setzen 0(Auf Neustart warten)
				state = 0;
 6ea:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <__data_end>
				// Für die konvertierte Reaktionszeit reservierten Speicher auf dem Heap wieder freigeben
				free(reactionTime);
 6ee:	8b 81       	ldd	r24, Y+3	; 0x03
 6f0:	9c 81       	ldd	r25, Y+4	; 0x04
 6f2:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <free>
				// Vorausetzungen für den Neustart schaffen
				UsartPuts("Start drücken:\n");
 6f6:	87 ec       	ldi	r24, 0xC7	; 199
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	0e 94 d5 04 	call	0x9aa	; 0x9aa <UsartPuts>
				LED_PORT = 0xff;
 6fe:	85 e3       	ldi	r24, 0x35	; 53
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	2f ef       	ldi	r18, 0xFF	; 255
 704:	fc 01       	movw	r30, r24
 706:	20 83       	st	Z, r18
				
				TCCR0 = (0<<WGM01) | (0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<CS02) | (0<<CS01) | (1<<CS00);
 708:	83 e5       	ldi	r24, 0x53	; 83
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	21 e0       	ldi	r18, 0x01	; 1
 70e:	fc 01       	movw	r30, r24
 710:	20 83       	st	Z, r18
				TIMSK |= (0<<TOIE0) | (0<<OCIE0);
 712:	89 e5       	ldi	r24, 0x59	; 89
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	29 e5       	ldi	r18, 0x59	; 89
 718:	30 e0       	ldi	r19, 0x00	; 0
 71a:	f9 01       	movw	r30, r18
 71c:	20 81       	ld	r18, Z
 71e:	fc 01       	movw	r30, r24
 720:	20 83       	st	Z, r18
				OCR0 = 0;
 722:	8c e5       	ldi	r24, 0x5C	; 92
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	fc 01       	movw	r30, r24
 728:	10 82       	st	Z, r1
				TCNT0 = 0;
 72a:	82 e5       	ldi	r24, 0x52	; 82
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	fc 01       	movw	r30, r24
 730:	10 82       	st	Z, r1
				
				// Warten auf das Loslassen der Stoptaster
				while(BIT_IS_SET(TASTER_PIN, 6) || BIT_IS_SET(TASTER_PIN, 2)){
 732:	00 00       	nop
 734:	86 e3       	ldi	r24, 0x36	; 54
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	fc 01       	movw	r30, r24
 73a:	80 81       	ld	r24, Z
 73c:	88 2f       	mov	r24, r24
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	80 74       	andi	r24, 0x40	; 64
 742:	99 27       	eor	r25, r25
 744:	89 2b       	or	r24, r25
 746:	b1 f7       	brne	.-20     	; 0x734 <A_3_4_1+0x2bc>
 748:	86 e3       	ldi	r24, 0x36	; 54
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	fc 01       	movw	r30, r24
 74e:	80 81       	ld	r24, Z
 750:	88 2f       	mov	r24, r24
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	84 70       	andi	r24, 0x04	; 4
 756:	99 27       	eor	r25, r25
 758:	89 2b       	or	r24, r25
 75a:	61 f7       	brne	.-40     	; 0x734 <A_3_4_1+0x2bc>
					
				}
				break;
 75c:	0a c0       	rjmp	.+20     	; 0x772 <A_3_4_1+0x2fa>
			// defaultsollte nicht eintreten
			default:
				// Ausgabe Fehlermeldung und von Vorne anfangen
				UsartPuts("Fehler aufgetreten!\n");
 75e:	87 e3       	ldi	r24, 0x37	; 55
 760:	91 e0       	ldi	r25, 0x01	; 1
 762:	0e 94 d5 04 	call	0x9aa	; 0x9aa <UsartPuts>
				state = 0;
 766:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <__data_end>
				break;
 76a:	03 c0       	rjmp	.+6      	; 0x772 <A_3_4_1+0x2fa>
					//Warten, bis Starttaste wieder losgelassen wurde
					while (BIT_IS_SET(TASTER_PIN, TASTER_START))
					{
					}
				}
				break;
 76c:	00 00       	nop
 76e:	c9 ce       	rjmp	.-622    	; 0x502 <A_3_4_1+0x8a>
				// Kontinuierliche Abfrage des 6. Tasters(Alternativ Taster 2 drücken, basiert auf Interuptverarbeitung, ansonsten gleiches Prinzip)
				if(BIT_IS_SET(TASTER_PIN, 6)){
					// state auf 3 setzen(Auswertung)
					state = 3;
				}
				break;
 770:	00 00       	nop
				// Ausgabe Fehlermeldung und von Vorne anfangen
				UsartPuts("Fehler aufgetreten!\n");
				state = 0;
				break;
		}
	}
 772:	c7 ce       	rjmp	.-626    	; 0x502 <A_3_4_1+0x8a>

00000774 <main>:
#include "Labor_3/MPT_LAB_3_3.h"
#include "Labor_3/MPT_LAB_3_4.h"


int main(void)
{	
 774:	cf 93       	push	r28
 776:	df 93       	push	r29
 778:	cd b7       	in	r28, 0x3d	; 61
 77a:	de b7       	in	r29, 0x3e	; 62

  //------------------------------------------------------------------------------
  // Hausaufgabe A_3_4: Entwickeln eines Reaktionstesters
  // A_3_4_1: Reaktionstester mit Zeitmessung über Timer0 und Terminalausgabe
  //------------------------------------------------------------------------------
  A_3_4_1();
 77c:	0e 94 3c 02 	call	0x478	; 0x478 <A_3_4_1>


  while(1)
  {
      //TODO:: Please write your application code 
  }
 780:	ff cf       	rjmp	.-2      	; 0x780 <main+0xc>

00000782 <UsartInit>:
 782:	0f 93       	push	r16
 784:	1f 93       	push	r17
 786:	cf 93       	push	r28
 788:	df 93       	push	r29
 78a:	cd b7       	in	r28, 0x3d	; 61
 78c:	de b7       	in	r29, 0x3e	; 62
 78e:	27 97       	sbiw	r28, 0x07	; 7
 790:	0f b6       	in	r0, 0x3f	; 63
 792:	f8 94       	cli
 794:	de bf       	out	0x3e, r29	; 62
 796:	0f be       	out	0x3f, r0	; 63
 798:	cd bf       	out	0x3d, r28	; 61
 79a:	89 83       	std	Y+1, r24	; 0x01
 79c:	6a 83       	std	Y+2, r22	; 0x02
 79e:	4b 83       	std	Y+3, r20	; 0x03
 7a0:	0c 83       	std	Y+4, r16	; 0x04
 7a2:	1d 83       	std	Y+5, r17	; 0x05
 7a4:	2e 83       	std	Y+6, r18	; 0x06
 7a6:	3f 83       	std	Y+7, r19	; 0x07
 7a8:	8a 81       	ldd	r24, Y+2	; 0x02
 7aa:	81 30       	cpi	r24, 0x01	; 1
 7ac:	51 f4       	brne	.+20     	; 0x7c2 <UsartInit+0x40>
 7ae:	80 e4       	ldi	r24, 0x40	; 64
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	20 e4       	ldi	r18, 0x40	; 64
 7b4:	30 e0       	ldi	r19, 0x00	; 0
 7b6:	f9 01       	movw	r30, r18
 7b8:	20 81       	ld	r18, Z
 7ba:	20 62       	ori	r18, 0x20	; 32
 7bc:	fc 01       	movw	r30, r24
 7be:	20 83       	st	Z, r18
 7c0:	15 c0       	rjmp	.+42     	; 0x7ec <UsartInit+0x6a>
 7c2:	8a 81       	ldd	r24, Y+2	; 0x02
 7c4:	82 30       	cpi	r24, 0x02	; 2
 7c6:	51 f4       	brne	.+20     	; 0x7dc <UsartInit+0x5a>
 7c8:	80 e4       	ldi	r24, 0x40	; 64
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	20 e4       	ldi	r18, 0x40	; 64
 7ce:	30 e0       	ldi	r19, 0x00	; 0
 7d0:	f9 01       	movw	r30, r18
 7d2:	20 81       	ld	r18, Z
 7d4:	20 63       	ori	r18, 0x30	; 48
 7d6:	fc 01       	movw	r30, r24
 7d8:	20 83       	st	Z, r18
 7da:	08 c0       	rjmp	.+16     	; 0x7ec <UsartInit+0x6a>
 7dc:	80 e4       	ldi	r24, 0x40	; 64
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	20 e4       	ldi	r18, 0x40	; 64
 7e2:	30 e0       	ldi	r19, 0x00	; 0
 7e4:	f9 01       	movw	r30, r18
 7e6:	20 81       	ld	r18, Z
 7e8:	fc 01       	movw	r30, r24
 7ea:	20 83       	st	Z, r18
 7ec:	8b 81       	ldd	r24, Y+3	; 0x03
 7ee:	81 30       	cpi	r24, 0x01	; 1
 7f0:	49 f4       	brne	.+18     	; 0x804 <UsartInit+0x82>
 7f2:	80 e4       	ldi	r24, 0x40	; 64
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	20 e4       	ldi	r18, 0x40	; 64
 7f8:	30 e0       	ldi	r19, 0x00	; 0
 7fa:	f9 01       	movw	r30, r18
 7fc:	20 81       	ld	r18, Z
 7fe:	fc 01       	movw	r30, r24
 800:	20 83       	st	Z, r18
 802:	0c c0       	rjmp	.+24     	; 0x81c <UsartInit+0x9a>
 804:	8b 81       	ldd	r24, Y+3	; 0x03
 806:	82 30       	cpi	r24, 0x02	; 2
 808:	49 f4       	brne	.+18     	; 0x81c <UsartInit+0x9a>
 80a:	80 e4       	ldi	r24, 0x40	; 64
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	20 e4       	ldi	r18, 0x40	; 64
 810:	30 e0       	ldi	r19, 0x00	; 0
 812:	f9 01       	movw	r30, r18
 814:	20 81       	ld	r18, Z
 816:	28 60       	ori	r18, 0x08	; 8
 818:	fc 01       	movw	r30, r24
 81a:	20 83       	st	Z, r18
 81c:	89 81       	ldd	r24, Y+1	; 0x01
 81e:	88 2f       	mov	r24, r24
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	87 30       	cpi	r24, 0x07	; 7
 824:	91 05       	cpc	r25, r1
 826:	c9 f0       	breq	.+50     	; 0x85a <UsartInit+0xd8>
 828:	88 30       	cpi	r24, 0x08	; 8
 82a:	91 05       	cpc	r25, r1
 82c:	34 f4       	brge	.+12     	; 0x83a <UsartInit+0xb8>
 82e:	85 30       	cpi	r24, 0x05	; 5
 830:	91 05       	cpc	r25, r1
 832:	d1 f1       	breq	.+116    	; 0x8a8 <__stack+0x49>
 834:	06 97       	sbiw	r24, 0x06	; 6
 836:	39 f0       	breq	.+14     	; 0x846 <UsartInit+0xc4>
 838:	38 c0       	rjmp	.+112    	; 0x8aa <__stack+0x4b>
 83a:	88 30       	cpi	r24, 0x08	; 8
 83c:	91 05       	cpc	r25, r1
 83e:	b9 f0       	breq	.+46     	; 0x86e <__stack+0xf>
 840:	09 97       	sbiw	r24, 0x09	; 9
 842:	f9 f0       	breq	.+62     	; 0x882 <__stack+0x23>
 844:	32 c0       	rjmp	.+100    	; 0x8aa <__stack+0x4b>
 846:	80 e4       	ldi	r24, 0x40	; 64
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	20 e4       	ldi	r18, 0x40	; 64
 84c:	30 e0       	ldi	r19, 0x00	; 0
 84e:	f9 01       	movw	r30, r18
 850:	20 81       	ld	r18, Z
 852:	22 60       	ori	r18, 0x02	; 2
 854:	fc 01       	movw	r30, r24
 856:	20 83       	st	Z, r18
 858:	28 c0       	rjmp	.+80     	; 0x8aa <__stack+0x4b>
 85a:	80 e4       	ldi	r24, 0x40	; 64
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	20 e4       	ldi	r18, 0x40	; 64
 860:	30 e0       	ldi	r19, 0x00	; 0
 862:	f9 01       	movw	r30, r18
 864:	20 81       	ld	r18, Z
 866:	24 60       	ori	r18, 0x04	; 4
 868:	fc 01       	movw	r30, r24
 86a:	20 83       	st	Z, r18
 86c:	1e c0       	rjmp	.+60     	; 0x8aa <__stack+0x4b>
 86e:	80 e4       	ldi	r24, 0x40	; 64
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	20 e4       	ldi	r18, 0x40	; 64
 874:	30 e0       	ldi	r19, 0x00	; 0
 876:	f9 01       	movw	r30, r18
 878:	20 81       	ld	r18, Z
 87a:	26 60       	ori	r18, 0x06	; 6
 87c:	fc 01       	movw	r30, r24
 87e:	20 83       	st	Z, r18
 880:	14 c0       	rjmp	.+40     	; 0x8aa <__stack+0x4b>
 882:	8a e2       	ldi	r24, 0x2A	; 42
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	2a e2       	ldi	r18, 0x2A	; 42
 888:	30 e0       	ldi	r19, 0x00	; 0
 88a:	f9 01       	movw	r30, r18
 88c:	20 81       	ld	r18, Z
 88e:	24 60       	ori	r18, 0x04	; 4
 890:	fc 01       	movw	r30, r24
 892:	20 83       	st	Z, r18
 894:	80 e4       	ldi	r24, 0x40	; 64
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	20 e4       	ldi	r18, 0x40	; 64
 89a:	30 e0       	ldi	r19, 0x00	; 0
 89c:	f9 01       	movw	r30, r18
 89e:	20 81       	ld	r18, Z
 8a0:	26 60       	ori	r18, 0x06	; 6
 8a2:	fc 01       	movw	r30, r24
 8a4:	20 83       	st	Z, r18
 8a6:	01 c0       	rjmp	.+2      	; 0x8aa <__stack+0x4b>
 8a8:	00 00       	nop
 8aa:	09 e2       	ldi	r16, 0x29	; 41
 8ac:	10 e0       	ldi	r17, 0x00	; 0
 8ae:	8c 81       	ldd	r24, Y+4	; 0x04
 8b0:	9d 81       	ldd	r25, Y+5	; 0x05
 8b2:	ae 81       	ldd	r26, Y+6	; 0x06
 8b4:	bf 81       	ldd	r27, Y+7	; 0x07
 8b6:	88 0f       	add	r24, r24
 8b8:	99 1f       	adc	r25, r25
 8ba:	aa 1f       	adc	r26, r26
 8bc:	bb 1f       	adc	r27, r27
 8be:	88 0f       	add	r24, r24
 8c0:	99 1f       	adc	r25, r25
 8c2:	aa 1f       	adc	r26, r26
 8c4:	bb 1f       	adc	r27, r27
 8c6:	88 0f       	add	r24, r24
 8c8:	99 1f       	adc	r25, r25
 8ca:	aa 1f       	adc	r26, r26
 8cc:	bb 1f       	adc	r27, r27
 8ce:	88 0f       	add	r24, r24
 8d0:	99 1f       	adc	r25, r25
 8d2:	aa 1f       	adc	r26, r26
 8d4:	bb 1f       	adc	r27, r27
 8d6:	9c 01       	movw	r18, r24
 8d8:	ad 01       	movw	r20, r26
 8da:	80 e0       	ldi	r24, 0x00	; 0
 8dc:	94 e2       	ldi	r25, 0x24	; 36
 8de:	a4 ef       	ldi	r26, 0xF4	; 244
 8e0:	b0 e0       	ldi	r27, 0x00	; 0
 8e2:	bc 01       	movw	r22, r24
 8e4:	cd 01       	movw	r24, r26
 8e6:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__udivmodsi4>
 8ea:	da 01       	movw	r26, r20
 8ec:	c9 01       	movw	r24, r18
 8ee:	81 50       	subi	r24, 0x01	; 1
 8f0:	f8 01       	movw	r30, r16
 8f2:	80 83       	st	Z, r24
 8f4:	00 e4       	ldi	r16, 0x40	; 64
 8f6:	10 e0       	ldi	r17, 0x00	; 0
 8f8:	8c 81       	ldd	r24, Y+4	; 0x04
 8fa:	9d 81       	ldd	r25, Y+5	; 0x05
 8fc:	ae 81       	ldd	r26, Y+6	; 0x06
 8fe:	bf 81       	ldd	r27, Y+7	; 0x07
 900:	88 0f       	add	r24, r24
 902:	99 1f       	adc	r25, r25
 904:	aa 1f       	adc	r26, r26
 906:	bb 1f       	adc	r27, r27
 908:	88 0f       	add	r24, r24
 90a:	99 1f       	adc	r25, r25
 90c:	aa 1f       	adc	r26, r26
 90e:	bb 1f       	adc	r27, r27
 910:	88 0f       	add	r24, r24
 912:	99 1f       	adc	r25, r25
 914:	aa 1f       	adc	r26, r26
 916:	bb 1f       	adc	r27, r27
 918:	88 0f       	add	r24, r24
 91a:	99 1f       	adc	r25, r25
 91c:	aa 1f       	adc	r26, r26
 91e:	bb 1f       	adc	r27, r27
 920:	9c 01       	movw	r18, r24
 922:	ad 01       	movw	r20, r26
 924:	80 e0       	ldi	r24, 0x00	; 0
 926:	94 e2       	ldi	r25, 0x24	; 36
 928:	a4 ef       	ldi	r26, 0xF4	; 244
 92a:	b0 e0       	ldi	r27, 0x00	; 0
 92c:	bc 01       	movw	r22, r24
 92e:	cd 01       	movw	r24, r26
 930:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__udivmodsi4>
 934:	da 01       	movw	r26, r20
 936:	c9 01       	movw	r24, r18
 938:	01 97       	sbiw	r24, 0x01	; 1
 93a:	a1 09       	sbc	r26, r1
 93c:	b1 09       	sbc	r27, r1
 93e:	89 2f       	mov	r24, r25
 940:	9a 2f       	mov	r25, r26
 942:	ab 2f       	mov	r26, r27
 944:	bb 27       	eor	r27, r27
 946:	f8 01       	movw	r30, r16
 948:	80 83       	st	Z, r24
 94a:	8a e2       	ldi	r24, 0x2A	; 42
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	2a e2       	ldi	r18, 0x2A	; 42
 950:	30 e0       	ldi	r19, 0x00	; 0
 952:	f9 01       	movw	r30, r18
 954:	20 81       	ld	r18, Z
 956:	28 61       	ori	r18, 0x18	; 24
 958:	fc 01       	movw	r30, r24
 95a:	20 83       	st	Z, r18
 95c:	00 00       	nop
 95e:	27 96       	adiw	r28, 0x07	; 7
 960:	0f b6       	in	r0, 0x3f	; 63
 962:	f8 94       	cli
 964:	de bf       	out	0x3e, r29	; 62
 966:	0f be       	out	0x3f, r0	; 63
 968:	cd bf       	out	0x3d, r28	; 61
 96a:	df 91       	pop	r29
 96c:	cf 91       	pop	r28
 96e:	1f 91       	pop	r17
 970:	0f 91       	pop	r16
 972:	08 95       	ret

00000974 <UsartPutc>:
 974:	cf 93       	push	r28
 976:	df 93       	push	r29
 978:	1f 92       	push	r1
 97a:	cd b7       	in	r28, 0x3d	; 61
 97c:	de b7       	in	r29, 0x3e	; 62
 97e:	89 83       	std	Y+1, r24	; 0x01
 980:	00 00       	nop
 982:	8b e2       	ldi	r24, 0x2B	; 43
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	fc 01       	movw	r30, r24
 988:	80 81       	ld	r24, Z
 98a:	88 2f       	mov	r24, r24
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	80 72       	andi	r24, 0x20	; 32
 990:	99 27       	eor	r25, r25
 992:	89 2b       	or	r24, r25
 994:	b1 f3       	breq	.-20     	; 0x982 <UsartPutc+0xe>
 996:	8c e2       	ldi	r24, 0x2C	; 44
 998:	90 e0       	ldi	r25, 0x00	; 0
 99a:	29 81       	ldd	r18, Y+1	; 0x01
 99c:	fc 01       	movw	r30, r24
 99e:	20 83       	st	Z, r18
 9a0:	00 00       	nop
 9a2:	0f 90       	pop	r0
 9a4:	df 91       	pop	r29
 9a6:	cf 91       	pop	r28
 9a8:	08 95       	ret

000009aa <UsartPuts>:
 9aa:	cf 93       	push	r28
 9ac:	df 93       	push	r29
 9ae:	00 d0       	rcall	.+0      	; 0x9b0 <UsartPuts+0x6>
 9b0:	00 d0       	rcall	.+0      	; 0x9b2 <UsartPuts+0x8>
 9b2:	cd b7       	in	r28, 0x3d	; 61
 9b4:	de b7       	in	r29, 0x3e	; 62
 9b6:	9c 83       	std	Y+4, r25	; 0x04
 9b8:	8b 83       	std	Y+3, r24	; 0x03
 9ba:	8b 81       	ldd	r24, Y+3	; 0x03
 9bc:	9c 81       	ldd	r25, Y+4	; 0x04
 9be:	9a 83       	std	Y+2, r25	; 0x02
 9c0:	89 83       	std	Y+1, r24	; 0x01
 9c2:	0b c0       	rjmp	.+22     	; 0x9da <UsartPuts+0x30>
 9c4:	89 81       	ldd	r24, Y+1	; 0x01
 9c6:	9a 81       	ldd	r25, Y+2	; 0x02
 9c8:	fc 01       	movw	r30, r24
 9ca:	80 81       	ld	r24, Z
 9cc:	0e 94 ba 04 	call	0x974	; 0x974 <UsartPutc>
 9d0:	89 81       	ldd	r24, Y+1	; 0x01
 9d2:	9a 81       	ldd	r25, Y+2	; 0x02
 9d4:	01 96       	adiw	r24, 0x01	; 1
 9d6:	9a 83       	std	Y+2, r25	; 0x02
 9d8:	89 83       	std	Y+1, r24	; 0x01
 9da:	89 81       	ldd	r24, Y+1	; 0x01
 9dc:	9a 81       	ldd	r25, Y+2	; 0x02
 9de:	fc 01       	movw	r30, r24
 9e0:	80 81       	ld	r24, Z
 9e2:	88 23       	and	r24, r24
 9e4:	79 f7       	brne	.-34     	; 0x9c4 <UsartPuts+0x1a>
 9e6:	00 00       	nop
 9e8:	0f 90       	pop	r0
 9ea:	0f 90       	pop	r0
 9ec:	0f 90       	pop	r0
 9ee:	0f 90       	pop	r0
 9f0:	df 91       	pop	r29
 9f2:	cf 91       	pop	r28
 9f4:	08 95       	ret

000009f6 <__udivmodhi4>:
 9f6:	aa 1b       	sub	r26, r26
 9f8:	bb 1b       	sub	r27, r27
 9fa:	51 e1       	ldi	r21, 0x11	; 17
 9fc:	07 c0       	rjmp	.+14     	; 0xa0c <__udivmodhi4_ep>

000009fe <__udivmodhi4_loop>:
 9fe:	aa 1f       	adc	r26, r26
 a00:	bb 1f       	adc	r27, r27
 a02:	a6 17       	cp	r26, r22
 a04:	b7 07       	cpc	r27, r23
 a06:	10 f0       	brcs	.+4      	; 0xa0c <__udivmodhi4_ep>
 a08:	a6 1b       	sub	r26, r22
 a0a:	b7 0b       	sbc	r27, r23

00000a0c <__udivmodhi4_ep>:
 a0c:	88 1f       	adc	r24, r24
 a0e:	99 1f       	adc	r25, r25
 a10:	5a 95       	dec	r21
 a12:	a9 f7       	brne	.-22     	; 0x9fe <__udivmodhi4_loop>
 a14:	80 95       	com	r24
 a16:	90 95       	com	r25
 a18:	bc 01       	movw	r22, r24
 a1a:	cd 01       	movw	r24, r26
 a1c:	08 95       	ret

00000a1e <__udivmodsi4>:
 a1e:	a1 e2       	ldi	r26, 0x21	; 33
 a20:	1a 2e       	mov	r1, r26
 a22:	aa 1b       	sub	r26, r26
 a24:	bb 1b       	sub	r27, r27
 a26:	fd 01       	movw	r30, r26
 a28:	0d c0       	rjmp	.+26     	; 0xa44 <__udivmodsi4_ep>

00000a2a <__udivmodsi4_loop>:
 a2a:	aa 1f       	adc	r26, r26
 a2c:	bb 1f       	adc	r27, r27
 a2e:	ee 1f       	adc	r30, r30
 a30:	ff 1f       	adc	r31, r31
 a32:	a2 17       	cp	r26, r18
 a34:	b3 07       	cpc	r27, r19
 a36:	e4 07       	cpc	r30, r20
 a38:	f5 07       	cpc	r31, r21
 a3a:	20 f0       	brcs	.+8      	; 0xa44 <__udivmodsi4_ep>
 a3c:	a2 1b       	sub	r26, r18
 a3e:	b3 0b       	sbc	r27, r19
 a40:	e4 0b       	sbc	r30, r20
 a42:	f5 0b       	sbc	r31, r21

00000a44 <__udivmodsi4_ep>:
 a44:	66 1f       	adc	r22, r22
 a46:	77 1f       	adc	r23, r23
 a48:	88 1f       	adc	r24, r24
 a4a:	99 1f       	adc	r25, r25
 a4c:	1a 94       	dec	r1
 a4e:	69 f7       	brne	.-38     	; 0xa2a <__udivmodsi4_loop>
 a50:	60 95       	com	r22
 a52:	70 95       	com	r23
 a54:	80 95       	com	r24
 a56:	90 95       	com	r25
 a58:	9b 01       	movw	r18, r22
 a5a:	ac 01       	movw	r20, r24
 a5c:	bd 01       	movw	r22, r26
 a5e:	cf 01       	movw	r24, r30
 a60:	08 95       	ret

00000a62 <__umulhisi3>:
 a62:	a2 9f       	mul	r26, r18
 a64:	b0 01       	movw	r22, r0
 a66:	b3 9f       	mul	r27, r19
 a68:	c0 01       	movw	r24, r0
 a6a:	a3 9f       	mul	r26, r19
 a6c:	70 0d       	add	r23, r0
 a6e:	81 1d       	adc	r24, r1
 a70:	11 24       	eor	r1, r1
 a72:	91 1d       	adc	r25, r1
 a74:	b2 9f       	mul	r27, r18
 a76:	70 0d       	add	r23, r0
 a78:	81 1d       	adc	r24, r1
 a7a:	11 24       	eor	r1, r1
 a7c:	91 1d       	adc	r25, r1
 a7e:	08 95       	ret

00000a80 <malloc>:
 a80:	0f 93       	push	r16
 a82:	1f 93       	push	r17
 a84:	cf 93       	push	r28
 a86:	df 93       	push	r29
 a88:	82 30       	cpi	r24, 0x02	; 2
 a8a:	91 05       	cpc	r25, r1
 a8c:	10 f4       	brcc	.+4      	; 0xa92 <malloc+0x12>
 a8e:	82 e0       	ldi	r24, 0x02	; 2
 a90:	90 e0       	ldi	r25, 0x00	; 0
 a92:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <__flp>
 a96:	f0 91 54 01 	lds	r31, 0x0154	; 0x800154 <__flp+0x1>
 a9a:	20 e0       	ldi	r18, 0x00	; 0
 a9c:	30 e0       	ldi	r19, 0x00	; 0
 a9e:	a0 e0       	ldi	r26, 0x00	; 0
 aa0:	b0 e0       	ldi	r27, 0x00	; 0
 aa2:	30 97       	sbiw	r30, 0x00	; 0
 aa4:	19 f1       	breq	.+70     	; 0xaec <malloc+0x6c>
 aa6:	40 81       	ld	r20, Z
 aa8:	51 81       	ldd	r21, Z+1	; 0x01
 aaa:	02 81       	ldd	r16, Z+2	; 0x02
 aac:	13 81       	ldd	r17, Z+3	; 0x03
 aae:	48 17       	cp	r20, r24
 ab0:	59 07       	cpc	r21, r25
 ab2:	c8 f0       	brcs	.+50     	; 0xae6 <malloc+0x66>
 ab4:	84 17       	cp	r24, r20
 ab6:	95 07       	cpc	r25, r21
 ab8:	69 f4       	brne	.+26     	; 0xad4 <malloc+0x54>
 aba:	10 97       	sbiw	r26, 0x00	; 0
 abc:	31 f0       	breq	.+12     	; 0xaca <malloc+0x4a>
 abe:	12 96       	adiw	r26, 0x02	; 2
 ac0:	0c 93       	st	X, r16
 ac2:	12 97       	sbiw	r26, 0x02	; 2
 ac4:	13 96       	adiw	r26, 0x03	; 3
 ac6:	1c 93       	st	X, r17
 ac8:	27 c0       	rjmp	.+78     	; 0xb18 <malloc+0x98>
 aca:	00 93 53 01 	sts	0x0153, r16	; 0x800153 <__flp>
 ace:	10 93 54 01 	sts	0x0154, r17	; 0x800154 <__flp+0x1>
 ad2:	22 c0       	rjmp	.+68     	; 0xb18 <malloc+0x98>
 ad4:	21 15       	cp	r18, r1
 ad6:	31 05       	cpc	r19, r1
 ad8:	19 f0       	breq	.+6      	; 0xae0 <malloc+0x60>
 ada:	42 17       	cp	r20, r18
 adc:	53 07       	cpc	r21, r19
 ade:	18 f4       	brcc	.+6      	; 0xae6 <malloc+0x66>
 ae0:	9a 01       	movw	r18, r20
 ae2:	bd 01       	movw	r22, r26
 ae4:	ef 01       	movw	r28, r30
 ae6:	df 01       	movw	r26, r30
 ae8:	f8 01       	movw	r30, r16
 aea:	db cf       	rjmp	.-74     	; 0xaa2 <malloc+0x22>
 aec:	21 15       	cp	r18, r1
 aee:	31 05       	cpc	r19, r1
 af0:	f9 f0       	breq	.+62     	; 0xb30 <malloc+0xb0>
 af2:	28 1b       	sub	r18, r24
 af4:	39 0b       	sbc	r19, r25
 af6:	24 30       	cpi	r18, 0x04	; 4
 af8:	31 05       	cpc	r19, r1
 afa:	80 f4       	brcc	.+32     	; 0xb1c <malloc+0x9c>
 afc:	8a 81       	ldd	r24, Y+2	; 0x02
 afe:	9b 81       	ldd	r25, Y+3	; 0x03
 b00:	61 15       	cp	r22, r1
 b02:	71 05       	cpc	r23, r1
 b04:	21 f0       	breq	.+8      	; 0xb0e <malloc+0x8e>
 b06:	fb 01       	movw	r30, r22
 b08:	93 83       	std	Z+3, r25	; 0x03
 b0a:	82 83       	std	Z+2, r24	; 0x02
 b0c:	04 c0       	rjmp	.+8      	; 0xb16 <malloc+0x96>
 b0e:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <__flp+0x1>
 b12:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__flp>
 b16:	fe 01       	movw	r30, r28
 b18:	32 96       	adiw	r30, 0x02	; 2
 b1a:	44 c0       	rjmp	.+136    	; 0xba4 <malloc+0x124>
 b1c:	fe 01       	movw	r30, r28
 b1e:	e2 0f       	add	r30, r18
 b20:	f3 1f       	adc	r31, r19
 b22:	81 93       	st	Z+, r24
 b24:	91 93       	st	Z+, r25
 b26:	22 50       	subi	r18, 0x02	; 2
 b28:	31 09       	sbc	r19, r1
 b2a:	39 83       	std	Y+1, r19	; 0x01
 b2c:	28 83       	st	Y, r18
 b2e:	3a c0       	rjmp	.+116    	; 0xba4 <malloc+0x124>
 b30:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <__brkval>
 b34:	30 91 52 01 	lds	r19, 0x0152	; 0x800152 <__brkval+0x1>
 b38:	23 2b       	or	r18, r19
 b3a:	41 f4       	brne	.+16     	; 0xb4c <malloc+0xcc>
 b3c:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
 b40:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
 b44:	30 93 52 01 	sts	0x0152, r19	; 0x800152 <__brkval+0x1>
 b48:	20 93 51 01 	sts	0x0151, r18	; 0x800151 <__brkval>
 b4c:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 b50:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 b54:	21 15       	cp	r18, r1
 b56:	31 05       	cpc	r19, r1
 b58:	41 f4       	brne	.+16     	; 0xb6a <malloc+0xea>
 b5a:	2d b7       	in	r18, 0x3d	; 61
 b5c:	3e b7       	in	r19, 0x3e	; 62
 b5e:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
 b62:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
 b66:	24 1b       	sub	r18, r20
 b68:	35 0b       	sbc	r19, r21
 b6a:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <__brkval>
 b6e:	f0 91 52 01 	lds	r31, 0x0152	; 0x800152 <__brkval+0x1>
 b72:	e2 17       	cp	r30, r18
 b74:	f3 07       	cpc	r31, r19
 b76:	a0 f4       	brcc	.+40     	; 0xba0 <malloc+0x120>
 b78:	2e 1b       	sub	r18, r30
 b7a:	3f 0b       	sbc	r19, r31
 b7c:	28 17       	cp	r18, r24
 b7e:	39 07       	cpc	r19, r25
 b80:	78 f0       	brcs	.+30     	; 0xba0 <malloc+0x120>
 b82:	ac 01       	movw	r20, r24
 b84:	4e 5f       	subi	r20, 0xFE	; 254
 b86:	5f 4f       	sbci	r21, 0xFF	; 255
 b88:	24 17       	cp	r18, r20
 b8a:	35 07       	cpc	r19, r21
 b8c:	48 f0       	brcs	.+18     	; 0xba0 <malloc+0x120>
 b8e:	4e 0f       	add	r20, r30
 b90:	5f 1f       	adc	r21, r31
 b92:	50 93 52 01 	sts	0x0152, r21	; 0x800152 <__brkval+0x1>
 b96:	40 93 51 01 	sts	0x0151, r20	; 0x800151 <__brkval>
 b9a:	81 93       	st	Z+, r24
 b9c:	91 93       	st	Z+, r25
 b9e:	02 c0       	rjmp	.+4      	; 0xba4 <malloc+0x124>
 ba0:	e0 e0       	ldi	r30, 0x00	; 0
 ba2:	f0 e0       	ldi	r31, 0x00	; 0
 ba4:	cf 01       	movw	r24, r30
 ba6:	df 91       	pop	r29
 ba8:	cf 91       	pop	r28
 baa:	1f 91       	pop	r17
 bac:	0f 91       	pop	r16
 bae:	08 95       	ret

00000bb0 <free>:
 bb0:	cf 93       	push	r28
 bb2:	df 93       	push	r29
 bb4:	00 97       	sbiw	r24, 0x00	; 0
 bb6:	09 f4       	brne	.+2      	; 0xbba <free+0xa>
 bb8:	81 c0       	rjmp	.+258    	; 0xcbc <free+0x10c>
 bba:	fc 01       	movw	r30, r24
 bbc:	32 97       	sbiw	r30, 0x02	; 2
 bbe:	13 82       	std	Z+3, r1	; 0x03
 bc0:	12 82       	std	Z+2, r1	; 0x02
 bc2:	a0 91 53 01 	lds	r26, 0x0153	; 0x800153 <__flp>
 bc6:	b0 91 54 01 	lds	r27, 0x0154	; 0x800154 <__flp+0x1>
 bca:	10 97       	sbiw	r26, 0x00	; 0
 bcc:	81 f4       	brne	.+32     	; 0xbee <free+0x3e>
 bce:	20 81       	ld	r18, Z
 bd0:	31 81       	ldd	r19, Z+1	; 0x01
 bd2:	82 0f       	add	r24, r18
 bd4:	93 1f       	adc	r25, r19
 bd6:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <__brkval>
 bda:	30 91 52 01 	lds	r19, 0x0152	; 0x800152 <__brkval+0x1>
 bde:	28 17       	cp	r18, r24
 be0:	39 07       	cpc	r19, r25
 be2:	51 f5       	brne	.+84     	; 0xc38 <free+0x88>
 be4:	f0 93 52 01 	sts	0x0152, r31	; 0x800152 <__brkval+0x1>
 be8:	e0 93 51 01 	sts	0x0151, r30	; 0x800151 <__brkval>
 bec:	67 c0       	rjmp	.+206    	; 0xcbc <free+0x10c>
 bee:	ed 01       	movw	r28, r26
 bf0:	20 e0       	ldi	r18, 0x00	; 0
 bf2:	30 e0       	ldi	r19, 0x00	; 0
 bf4:	ce 17       	cp	r28, r30
 bf6:	df 07       	cpc	r29, r31
 bf8:	40 f4       	brcc	.+16     	; 0xc0a <free+0x5a>
 bfa:	4a 81       	ldd	r20, Y+2	; 0x02
 bfc:	5b 81       	ldd	r21, Y+3	; 0x03
 bfe:	9e 01       	movw	r18, r28
 c00:	41 15       	cp	r20, r1
 c02:	51 05       	cpc	r21, r1
 c04:	f1 f0       	breq	.+60     	; 0xc42 <free+0x92>
 c06:	ea 01       	movw	r28, r20
 c08:	f5 cf       	rjmp	.-22     	; 0xbf4 <free+0x44>
 c0a:	d3 83       	std	Z+3, r29	; 0x03
 c0c:	c2 83       	std	Z+2, r28	; 0x02
 c0e:	40 81       	ld	r20, Z
 c10:	51 81       	ldd	r21, Z+1	; 0x01
 c12:	84 0f       	add	r24, r20
 c14:	95 1f       	adc	r25, r21
 c16:	c8 17       	cp	r28, r24
 c18:	d9 07       	cpc	r29, r25
 c1a:	59 f4       	brne	.+22     	; 0xc32 <free+0x82>
 c1c:	88 81       	ld	r24, Y
 c1e:	99 81       	ldd	r25, Y+1	; 0x01
 c20:	84 0f       	add	r24, r20
 c22:	95 1f       	adc	r25, r21
 c24:	02 96       	adiw	r24, 0x02	; 2
 c26:	91 83       	std	Z+1, r25	; 0x01
 c28:	80 83       	st	Z, r24
 c2a:	8a 81       	ldd	r24, Y+2	; 0x02
 c2c:	9b 81       	ldd	r25, Y+3	; 0x03
 c2e:	93 83       	std	Z+3, r25	; 0x03
 c30:	82 83       	std	Z+2, r24	; 0x02
 c32:	21 15       	cp	r18, r1
 c34:	31 05       	cpc	r19, r1
 c36:	29 f4       	brne	.+10     	; 0xc42 <free+0x92>
 c38:	f0 93 54 01 	sts	0x0154, r31	; 0x800154 <__flp+0x1>
 c3c:	e0 93 53 01 	sts	0x0153, r30	; 0x800153 <__flp>
 c40:	3d c0       	rjmp	.+122    	; 0xcbc <free+0x10c>
 c42:	e9 01       	movw	r28, r18
 c44:	fb 83       	std	Y+3, r31	; 0x03
 c46:	ea 83       	std	Y+2, r30	; 0x02
 c48:	49 91       	ld	r20, Y+
 c4a:	59 91       	ld	r21, Y+
 c4c:	c4 0f       	add	r28, r20
 c4e:	d5 1f       	adc	r29, r21
 c50:	ec 17       	cp	r30, r28
 c52:	fd 07       	cpc	r31, r29
 c54:	61 f4       	brne	.+24     	; 0xc6e <free+0xbe>
 c56:	80 81       	ld	r24, Z
 c58:	91 81       	ldd	r25, Z+1	; 0x01
 c5a:	84 0f       	add	r24, r20
 c5c:	95 1f       	adc	r25, r21
 c5e:	02 96       	adiw	r24, 0x02	; 2
 c60:	e9 01       	movw	r28, r18
 c62:	99 83       	std	Y+1, r25	; 0x01
 c64:	88 83       	st	Y, r24
 c66:	82 81       	ldd	r24, Z+2	; 0x02
 c68:	93 81       	ldd	r25, Z+3	; 0x03
 c6a:	9b 83       	std	Y+3, r25	; 0x03
 c6c:	8a 83       	std	Y+2, r24	; 0x02
 c6e:	e0 e0       	ldi	r30, 0x00	; 0
 c70:	f0 e0       	ldi	r31, 0x00	; 0
 c72:	12 96       	adiw	r26, 0x02	; 2
 c74:	8d 91       	ld	r24, X+
 c76:	9c 91       	ld	r25, X
 c78:	13 97       	sbiw	r26, 0x03	; 3
 c7a:	00 97       	sbiw	r24, 0x00	; 0
 c7c:	19 f0       	breq	.+6      	; 0xc84 <free+0xd4>
 c7e:	fd 01       	movw	r30, r26
 c80:	dc 01       	movw	r26, r24
 c82:	f7 cf       	rjmp	.-18     	; 0xc72 <free+0xc2>
 c84:	8d 91       	ld	r24, X+
 c86:	9c 91       	ld	r25, X
 c88:	11 97       	sbiw	r26, 0x01	; 1
 c8a:	9d 01       	movw	r18, r26
 c8c:	2e 5f       	subi	r18, 0xFE	; 254
 c8e:	3f 4f       	sbci	r19, 0xFF	; 255
 c90:	82 0f       	add	r24, r18
 c92:	93 1f       	adc	r25, r19
 c94:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <__brkval>
 c98:	30 91 52 01 	lds	r19, 0x0152	; 0x800152 <__brkval+0x1>
 c9c:	28 17       	cp	r18, r24
 c9e:	39 07       	cpc	r19, r25
 ca0:	69 f4       	brne	.+26     	; 0xcbc <free+0x10c>
 ca2:	30 97       	sbiw	r30, 0x00	; 0
 ca4:	29 f4       	brne	.+10     	; 0xcb0 <free+0x100>
 ca6:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <__flp+0x1>
 caa:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <__flp>
 cae:	02 c0       	rjmp	.+4      	; 0xcb4 <free+0x104>
 cb0:	13 82       	std	Z+3, r1	; 0x03
 cb2:	12 82       	std	Z+2, r1	; 0x02
 cb4:	b0 93 52 01 	sts	0x0152, r27	; 0x800152 <__brkval+0x1>
 cb8:	a0 93 51 01 	sts	0x0151, r26	; 0x800151 <__brkval>
 cbc:	df 91       	pop	r29
 cbe:	cf 91       	pop	r28
 cc0:	08 95       	ret

00000cc2 <_exit>:
 cc2:	f8 94       	cli

00000cc4 <__stop_program>:
 cc4:	ff cf       	rjmp	.-2      	; 0xcc4 <__stop_program>
